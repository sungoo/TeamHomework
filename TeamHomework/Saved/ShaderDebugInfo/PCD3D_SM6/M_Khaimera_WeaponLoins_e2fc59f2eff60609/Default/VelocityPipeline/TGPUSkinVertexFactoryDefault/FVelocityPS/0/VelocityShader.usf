#line 1 "__UE_FILENAME_SENTINEL__"
precise float MakePrecise(in precise float v) { precise float pv = v; return pv; }
precise float2 MakePrecise(in precise float2 v) { precise float2 pv = v; return pv; }
precise float3 MakePrecise(in precise float3 v) { precise float3 pv = v; return pv; }
precise float4 MakePrecise(in precise float4 v) { precise float4 pv = v; return pv; }
bool select_internal(bool    c, bool a, bool b) { return bool (c   ? a.x : b.x); }
bool2 select_internal(bool    c, bool a, bool2 b) { return bool2(c   ? a   : b.x, c   ? a   : b.y); }
bool2 select_internal(bool    c, bool2 a, bool b) { return bool2(c   ? a.x : b  , c   ? a.y : b  ); }
bool2 select_internal(bool    c, bool2 a, bool2 b) { return bool2(c   ? a.x : b.x, c   ? a.y : b.y); }
bool2 select_internal(bool2   c, bool a, bool b) { return bool2(c.x ? a   : b  , c.y ? a   : b  ); }
bool2 select_internal(bool2   c, bool a, bool2 b) { return bool2(c.x ? a   : b.x, c.y ? a   : b.y); }
bool2 select_internal(bool2   c, bool2 a, bool b) { return bool2(c.x ? a.x : b  , c.y ? a.y : b  ); }
bool2 select_internal(bool2   c, bool2 a, bool2 b) { return bool2(c.x ? a.x : b.x, c.y ? a.y : b.y); }
bool3 select_internal(bool    c, bool a, bool3 b) { return bool3(c   ? a   : b.x, c   ? a   : b.y, c   ? a   : b.z); }
bool3 select_internal(bool    c, bool3 a, bool b) { return bool3(c   ? a.x : b  , c   ? a.y : b  , c   ? a.z : b  ); }
bool3 select_internal(bool    c, bool3 a, bool3 b) { return bool3(c   ? a.x : b.x, c   ? a.y : b.y, c   ? a.z : b.z); }
bool3 select_internal(bool3   c, bool a, bool b) { return bool3(c.x ? a   : b  , c.y ? a   : b  , c.z ? a   : b  ); }
bool3 select_internal(bool3   c, bool a, bool3 b) { return bool3(c.x ? a   : b.x, c.y ? a   : b.y, c.z ? a   : b.z); }
bool3 select_internal(bool3   c, bool3 a, bool b) { return bool3(c.x ? a.x : b  , c.y ? a.y : b  , c.z ? a.z : b  ); }
bool3 select_internal(bool3   c, bool3 a, bool3 b) { return bool3(c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z); }
bool4 select_internal(bool    c, bool a, bool4 b) { return bool4(c   ? a   : b.x, c   ? a   : b.y, c   ? a   : b.z, c   ? a   : b.w); }
bool4 select_internal(bool    c, bool4 a, bool b) { return bool4(c   ? a.x : b  , c   ? a.y : b  , c   ? a.z : b  , c   ? a.w : b  ); }
bool4 select_internal(bool    c, bool4 a, bool4 b) { return bool4(c   ? a.x : b.x, c   ? a.y : b.y, c   ? a.z : b.z, c   ? a.w : b.w); }
bool4 select_internal(bool4   c, bool a, bool b) { return bool4(c.x ? a   : b  , c.y ? a   : b  , c.z ? a   : b  , c.w ? a   : b  ); }
bool4 select_internal(bool4   c, bool a, bool4 b) { return bool4(c.x ? a   : b.x, c.y ? a   : b.y, c.z ? a   : b.z, c.w ? a   : b.w); }
bool4 select_internal(bool4   c, bool4 a, bool b) { return bool4(c.x ? a.x : b  , c.y ? a.y : b  , c.z ? a.z : b  , c.w ? a.w : b  ); }
bool4 select_internal(bool4   c, bool4 a, bool4 b) { return bool4(c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z, c.w ? a.w : b.w); }
int select_internal(bool    c, int a, int b) { return int (c   ? a.x : b.x); }
int2 select_internal(bool    c, int a, int2 b) { return int2(c   ? a   : b.x, c   ? a   : b.y); }
int2 select_internal(bool    c, int2 a, int b) { return int2(c   ? a.x : b  , c   ? a.y : b  ); }
int2 select_internal(bool    c, int2 a, int2 b) { return int2(c   ? a.x : b.x, c   ? a.y : b.y); }
int2 select_internal(bool2   c, int a, int b) { return int2(c.x ? a   : b  , c.y ? a   : b  ); }
int2 select_internal(bool2   c, int a, int2 b) { return int2(c.x ? a   : b.x, c.y ? a   : b.y); }
int2 select_internal(bool2   c, int2 a, int b) { return int2(c.x ? a.x : b  , c.y ? a.y : b  ); }
int2 select_internal(bool2   c, int2 a, int2 b) { return int2(c.x ? a.x : b.x, c.y ? a.y : b.y); }
int3 select_internal(bool    c, int a, int3 b) { return int3(c   ? a   : b.x, c   ? a   : b.y, c   ? a   : b.z); }
int3 select_internal(bool    c, int3 a, int b) { return int3(c   ? a.x : b  , c   ? a.y : b  , c   ? a.z : b  ); }
int3 select_internal(bool    c, int3 a, int3 b) { return int3(c   ? a.x : b.x, c   ? a.y : b.y, c   ? a.z : b.z); }
int3 select_internal(bool3   c, int a, int b) { return int3(c.x ? a   : b  , c.y ? a   : b  , c.z ? a   : b  ); }
int3 select_internal(bool3   c, int a, int3 b) { return int3(c.x ? a   : b.x, c.y ? a   : b.y, c.z ? a   : b.z); }
int3 select_internal(bool3   c, int3 a, int b) { return int3(c.x ? a.x : b  , c.y ? a.y : b  , c.z ? a.z : b  ); }
int3 select_internal(bool3   c, int3 a, int3 b) { return int3(c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z); }
int4 select_internal(bool    c, int a, int4 b) { return int4(c   ? a   : b.x, c   ? a   : b.y, c   ? a   : b.z, c   ? a   : b.w); }
int4 select_internal(bool    c, int4 a, int b) { return int4(c   ? a.x : b  , c   ? a.y : b  , c   ? a.z : b  , c   ? a.w : b  ); }
int4 select_internal(bool    c, int4 a, int4 b) { return int4(c   ? a.x : b.x, c   ? a.y : b.y, c   ? a.z : b.z, c   ? a.w : b.w); }
int4 select_internal(bool4   c, int a, int b) { return int4(c.x ? a   : b  , c.y ? a   : b  , c.z ? a   : b  , c.w ? a   : b  ); }
int4 select_internal(bool4   c, int a, int4 b) { return int4(c.x ? a   : b.x, c.y ? a   : b.y, c.z ? a   : b.z, c.w ? a   : b.w); }
int4 select_internal(bool4   c, int4 a, int b) { return int4(c.x ? a.x : b  , c.y ? a.y : b  , c.z ? a.z : b  , c.w ? a.w : b  ); }
int4 select_internal(bool4   c, int4 a, int4 b) { return int4(c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z, c.w ? a.w : b.w); }
float select_internal(bool    c, float a, float b) { return float (c   ? a.x : b.x); }
float2 select_internal(bool    c, float a, float2 b) { return float2(c   ? a   : b.x, c   ? a   : b.y); }
float2 select_internal(bool    c, float2 a, float b) { return float2(c   ? a.x : b  , c   ? a.y : b  ); }
float2 select_internal(bool    c, float2 a, float2 b) { return float2(c   ? a.x : b.x, c   ? a.y : b.y); }
float2 select_internal(bool2   c, float a, float b) { return float2(c.x ? a   : b  , c.y ? a   : b  ); }
float2 select_internal(bool2   c, float a, float2 b) { return float2(c.x ? a   : b.x, c.y ? a   : b.y); }
float2 select_internal(bool2   c, float2 a, float b) { return float2(c.x ? a.x : b  , c.y ? a.y : b  ); }
float2 select_internal(bool2   c, float2 a, float2 b) { return float2(c.x ? a.x : b.x, c.y ? a.y : b.y); }
float3 select_internal(bool    c, float a, float3 b) { return float3(c   ? a   : b.x, c   ? a   : b.y, c   ? a   : b.z); }
float3 select_internal(bool    c, float3 a, float b) { return float3(c   ? a.x : b  , c   ? a.y : b  , c   ? a.z : b  ); }
float3 select_internal(bool    c, float3 a, float3 b) { return float3(c   ? a.x : b.x, c   ? a.y : b.y, c   ? a.z : b.z); }
float3 select_internal(bool3   c, float a, float b) { return float3(c.x ? a   : b  , c.y ? a   : b  , c.z ? a   : b  ); }
float3 select_internal(bool3   c, float a, float3 b) { return float3(c.x ? a   : b.x, c.y ? a   : b.y, c.z ? a   : b.z); }
float3 select_internal(bool3   c, float3 a, float b) { return float3(c.x ? a.x : b  , c.y ? a.y : b  , c.z ? a.z : b  ); }
float3 select_internal(bool3   c, float3 a, float3 b) { return float3(c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z); }
float4 select_internal(bool    c, float a, float4 b) { return float4(c   ? a   : b.x, c   ? a   : b.y, c   ? a   : b.z, c   ? a   : b.w); }
float4 select_internal(bool    c, float4 a, float b) { return float4(c   ? a.x : b  , c   ? a.y : b  , c   ? a.z : b  , c   ? a.w : b  ); }
float4 select_internal(bool    c, float4 a, float4 b) { return float4(c   ? a.x : b.x, c   ? a.y : b.y, c   ? a.z : b.z, c   ? a.w : b.w); }
float4 select_internal(bool4   c, float a, float b) { return float4(c.x ? a   : b  , c.y ? a   : b  , c.z ? a   : b  , c.w ? a   : b  ); }
float4 select_internal(bool4   c, float a, float4 b) { return float4(c.x ? a   : b.x, c.y ? a   : b.y, c.z ? a   : b.z, c.w ? a   : b.w); }
float4 select_internal(bool4   c, float4 a, float b) { return float4(c.x ? a.x : b  , c.y ? a.y : b  , c.z ? a.z : b  , c.w ? a.w : b  ); }
float4 select_internal(bool4   c, float4 a, float4 b) { return float4(c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z, c.w ? a.w : b.w); }
struct FloatDeriv2
{
	float2 Value;
	float2 Ddx;
	float2 Ddy;
};
struct FDFScalar
{
	float High;
	float Low;
};
FDFScalar MakeDFScalar(float High, float Low)
{
	FDFScalar Result;
	Result.High = High;
	Result.Low = Low;
	return Result;
}
FDFScalar DFPromote(FDFScalar Value) { return Value; }
FDFScalar DFPromote(float Value) { return MakeDFScalar(Value, (float)0); }
FDFScalar DFTwoSum(float Lhs, float Rhs)
{
	const float S =   MakePrecise( ( Lhs ) + ( Rhs ) );
	const float V =   MakePrecise( ( S ) - ( Lhs ) );
	const float Q =   MakePrecise( ( S ) - ( V ) );
	const float R =   MakePrecise( ( Lhs ) - ( Q ) );
	const float T =   MakePrecise( ( Rhs ) - ( V ) );
	const float Y =   MakePrecise( ( R ) + ( T ) );
	return MakeDFScalar(S, Y);
}
FDFScalar DFFastTwoSum(float Lhs, float Rhs)
{
	const float S =   MakePrecise( ( Lhs ) + ( Rhs ) );
	const float T =   MakePrecise( ( S ) - ( Lhs ) );
	const float E =   MakePrecise( ( Rhs ) - ( T ) );
	return MakeDFScalar(S, E);
}
FDFScalar DFTwoProduct(float Lhs, float Rhs)
{
	const float P = Lhs * Rhs;
	const float E =   MakePrecise(  mad( ( Lhs ) , ( Rhs ) , ( -P ) ) );
	return MakeDFScalar(P, E);
}
FDFScalar DFMultiply(float Lhs, float Rhs) { return DFTwoProduct(Lhs, Rhs); }
FDFScalar DFMultiply(FDFScalar Lhs, FDFScalar Rhs)
{
	const FDFScalar P = DFTwoProduct(Lhs.High, Rhs.High);
	float T =   MakePrecise( ( Lhs.High ) * ( Rhs.Low ) );
	T =   MakePrecise(  mad( ( Lhs.Low ) , ( Rhs.High ) , ( T ) ) );
	T =   MakePrecise( ( T ) + ( P.Low ) );
	return DFFastTwoSum(P.High, T);
}
FDFScalar DFMultiply(FDFScalar Lhs, float Rhs)
{
	FDFScalar P = DFTwoProduct(Lhs.High, Rhs);
	float T =   MakePrecise(  mad( ( Lhs.Low ) , ( Rhs ) , ( P.Low ) ) );
	return DFFastTwoSum(P.High, T);
}
FDFScalar DFMultiply(float Lhs, FDFScalar Rhs) { return DFMultiply(Rhs, Lhs); }
FDFScalar DFFastDivide(FDFScalar Lhs, FDFScalar Rhs);
FDFScalar DFFastDivide(FDFScalar Lhs, FDFScalar Rhs)
{
	const float Th =   MakePrecise( ( Lhs.High ) / ( Rhs.High ) );
	const FDFScalar R = DFMultiply(Rhs, Th);
	const float Ph =   MakePrecise( ( Lhs.High ) - ( R.High ) );
	const float Dl =   MakePrecise( ( Lhs.Low ) - ( R.Low ) );
	const float D =   MakePrecise( ( Ph ) + ( Dl ) );
	const float Tl =   MakePrecise( ( D ) / ( Rhs.High ) );
	return DFFastTwoSum(Th, Tl);
}
FDFScalar DFFastDivide(FDFScalar Lhs, float Rhs)
{
	const float Th =   MakePrecise( ( Lhs.High ) / ( Rhs ) );
	const FDFScalar R = DFTwoProduct(Rhs, Th);
	const float Ph =   MakePrecise( ( Lhs.High ) - ( R.High ) );
	const float Dl =   MakePrecise( ( Lhs.Low ) - ( R.Low ) );
	const float D =   MakePrecise( ( Ph ) + ( Dl ) );
	const float Tl =   MakePrecise( ( D ) / ( Rhs ) );
	return DFFastTwoSum(Th, Tl);
}
FDFScalar DFFastDivide(float Lhs, FDFScalar Rhs) { return DFFastDivide(DFPromote(Lhs), Rhs); }
FDFScalar DFFastDivide(float Lhs, float Rhs) { return DFFastDivide(DFPromote(Lhs), Rhs); }
struct FDFVector2
{
	float2 High;
	float2 Low;
};
FDFVector2 MakeDFVector2(float2 High, float2 Low)
{
	FDFVector2 Result;
	Result.High = High;
	Result.Low = Low;
	return Result;
}
FDFVector2 DFPromote(FDFVector2 Value) { return Value; }
FDFVector2 DFPromote(float2 Value) { return MakeDFVector2(Value, (float2)0); }
FDFVector2 DFTwoSum(float2 Lhs, float2 Rhs)
{
	const float2 S =   MakePrecise( ( Lhs ) + ( Rhs ) );
	const float2 V =   MakePrecise( ( S ) - ( Lhs ) );
	const float2 Q =   MakePrecise( ( S ) - ( V ) );
	const float2 R =   MakePrecise( ( Lhs ) - ( Q ) );
	const float2 T =   MakePrecise( ( Rhs ) - ( V ) );
	const float2 Y =   MakePrecise( ( R ) + ( T ) );
	return MakeDFVector2(S, Y);
}
FDFVector2 DFFastTwoSum(float2 Lhs, float2 Rhs)
{
	const float2 S =   MakePrecise( ( Lhs ) + ( Rhs ) );
	const float2 T =   MakePrecise( ( S ) - ( Lhs ) );
	const float2 E =   MakePrecise( ( Rhs ) - ( T ) );
	return MakeDFVector2(S, E);
}
FDFVector2 DFTwoProduct(float2 Lhs, float2 Rhs)
{
	const float2 P = Lhs * Rhs;
	const float2 E =   MakePrecise(  mad( ( Lhs ) , ( Rhs ) , ( -P ) ) );
	return MakeDFVector2(P, E);
}
FDFVector2 DFMultiply(float2 Lhs, float2 Rhs) { return DFTwoProduct(Lhs, Rhs); }
FDFVector2 DFMultiply(FDFVector2 Lhs, FDFVector2 Rhs)
{
	const FDFVector2 P = DFTwoProduct(Lhs.High, Rhs.High);
	float2 T =   MakePrecise( ( Lhs.High ) * ( Rhs.Low ) );
	T =   MakePrecise(  mad( ( Lhs.Low ) , ( Rhs.High ) , ( T ) ) );
	T =   MakePrecise( ( T ) + ( P.Low ) );
	return DFFastTwoSum(P.High, T);
}
FDFVector2 DFMultiply(FDFVector2 Lhs, float2 Rhs)
{
	FDFVector2 P = DFTwoProduct(Lhs.High, Rhs);
	float2 T =   MakePrecise(  mad( ( Lhs.Low ) , ( Rhs ) , ( P.Low ) ) );
	return DFFastTwoSum(P.High, T);
}
FDFVector2 DFMultiply(float2 Lhs, FDFVector2 Rhs) { return DFMultiply(Rhs, Lhs); }
FDFVector2 DFFastDivide(FDFVector2 Lhs, FDFVector2 Rhs);
FDFVector2 DFFastDivide(FDFVector2 Lhs, FDFVector2 Rhs)
{
	const float2 Th =   MakePrecise( ( Lhs.High ) / ( Rhs.High ) );
	const FDFVector2 R = DFMultiply(Rhs, Th);
	const float2 Ph =   MakePrecise( ( Lhs.High ) - ( R.High ) );
	const float2 Dl =   MakePrecise( ( Lhs.Low ) - ( R.Low ) );
	const float2 D =   MakePrecise( ( Ph ) + ( Dl ) );
	const float2 Tl =   MakePrecise( ( D ) / ( Rhs.High ) );
	return DFFastTwoSum(Th, Tl);
}
FDFVector2 DFFastDivide(FDFVector2 Lhs, float2 Rhs)
{
	const float2 Th =   MakePrecise( ( Lhs.High ) / ( Rhs ) );
	const FDFVector2 R = DFTwoProduct(Rhs, Th);
	const float2 Ph =   MakePrecise( ( Lhs.High ) - ( R.High ) );
	const float2 Dl =   MakePrecise( ( Lhs.Low ) - ( R.Low ) );
	const float2 D =   MakePrecise( ( Ph ) + ( Dl ) );
	const float2 Tl =   MakePrecise( ( D ) / ( Rhs ) );
	return DFFastTwoSum(Th, Tl);
}
FDFVector2 DFFastDivide(float2 Lhs, FDFVector2 Rhs) { return DFFastDivide(DFPromote(Lhs), Rhs); }
FDFVector2 DFFastDivide(float2 Lhs, float2 Rhs) { return DFFastDivide(DFPromote(Lhs), Rhs); }
FDFVector2 DFBroadcast2(FDFScalar V)
{
	const float2 High = V.High;
	const float2 Low = V.Low;
	return MakeDFVector2(High, Low);
}
float2 DFBroadcast2(float V)
{
	const float2 Single = V;
	return Single;
}
FDFVector2  DFMultiply (FDFScalar Lhs, FDFVector2 Rhs) { return DFMultiply (DFBroadcast2(Lhs), Rhs); }
FDFVector2  DFMultiply (float Lhs, FDFVector2 Rhs) { return DFMultiply (DFBroadcast2(Lhs), Rhs); }
FDFVector2  DFMultiply (FDFScalar Lhs, float2 Rhs) { return DFMultiply (DFBroadcast2(Lhs), Rhs); }
FDFVector2  DFMultiply (float Lhs, float2 Rhs) { return DFMultiply (DFBroadcast2(Lhs), Rhs); }
FDFVector2  DFMultiply (FDFVector2 Lhs, FDFScalar Rhs) { return DFMultiply (Lhs, DFBroadcast2(Rhs)); }
FDFVector2  DFMultiply (FDFVector2 Lhs, float Rhs)     { return DFMultiply (Lhs, DFBroadcast2(Rhs)); }
FDFVector2  DFMultiply (float2 Lhs, FDFScalar Rhs) { return DFMultiply (Lhs, DFBroadcast2(Rhs)); }
FDFVector2  DFMultiply (float2 Lhs, float Rhs) { return DFMultiply (Lhs, DFBroadcast2(Rhs)); }
FDFVector2  DFFastDivide (FDFScalar Lhs, FDFVector2 Rhs) { return DFFastDivide (DFBroadcast2(Lhs), Rhs); }
FDFVector2  DFFastDivide (float Lhs, FDFVector2 Rhs) { return DFFastDivide (DFBroadcast2(Lhs), Rhs); }
FDFVector2  DFFastDivide (FDFScalar Lhs, float2 Rhs) { return DFFastDivide (DFBroadcast2(Lhs), Rhs); }
FDFVector2  DFFastDivide (float Lhs, float2 Rhs) { return DFFastDivide (DFBroadcast2(Lhs), Rhs); }
FDFVector2  DFFastDivide (FDFVector2 Lhs, FDFScalar Rhs) { return DFFastDivide (Lhs, DFBroadcast2(Rhs)); }
FDFVector2  DFFastDivide (FDFVector2 Lhs, float Rhs)     { return DFFastDivide (Lhs, DFBroadcast2(Rhs)); }
FDFVector2  DFFastDivide (float2 Lhs, FDFScalar Rhs) { return DFFastDivide (Lhs, DFBroadcast2(Rhs)); }
FDFVector2  DFFastDivide (float2 Lhs, float Rhs) { return DFFastDivide (Lhs, DFBroadcast2(Rhs)); }
struct FDFVector3
{
	float3 High;
	float3 Low;
};
FDFVector3 MakeDFVector3(float3 High, float3 Low)
{
	FDFVector3 Result;
	Result.High = High;
	Result.Low = Low;
	return Result;
}
FDFVector3 DFPromote(FDFVector3 Value) { return Value; }
FDFVector3 DFPromote(float3 Value) { return MakeDFVector3(Value, (float3)0); }
FDFVector3 DFTwoSum(float3 Lhs, float3 Rhs)
{
	const float3 S =   MakePrecise( ( Lhs ) + ( Rhs ) );
	const float3 V =   MakePrecise( ( S ) - ( Lhs ) );
	const float3 Q =   MakePrecise( ( S ) - ( V ) );
	const float3 R =   MakePrecise( ( Lhs ) - ( Q ) );
	const float3 T =   MakePrecise( ( Rhs ) - ( V ) );
	const float3 Y =   MakePrecise( ( R ) + ( T ) );
	return MakeDFVector3(S, Y);
}
FDFVector3 DFFastTwoSum(float3 Lhs, float3 Rhs)
{
	const float3 S =   MakePrecise( ( Lhs ) + ( Rhs ) );
	const float3 T =   MakePrecise( ( S ) - ( Lhs ) );
	const float3 E =   MakePrecise( ( Rhs ) - ( T ) );
	return MakeDFVector3(S, E);
}
FDFVector3 DFTwoProduct(float3 Lhs, float3 Rhs)
{
	const float3 P = Lhs * Rhs;
	const float3 E =   MakePrecise(  mad( ( Lhs ) , ( Rhs ) , ( -P ) ) );
	return MakeDFVector3(P, E);
}
FDFVector3 DFMultiply(float3 Lhs, float3 Rhs) { return DFTwoProduct(Lhs, Rhs); }
FDFVector3 DFMultiply(FDFVector3 Lhs, FDFVector3 Rhs)
{
	const FDFVector3 P = DFTwoProduct(Lhs.High, Rhs.High);
	float3 T =   MakePrecise( ( Lhs.High ) * ( Rhs.Low ) );
	T =   MakePrecise(  mad( ( Lhs.Low ) , ( Rhs.High ) , ( T ) ) );
	T =   MakePrecise( ( T ) + ( P.Low ) );
	return DFFastTwoSum(P.High, T);
}
FDFVector3 DFMultiply(FDFVector3 Lhs, float3 Rhs)
{
	FDFVector3 P = DFTwoProduct(Lhs.High, Rhs);
	float3 T =   MakePrecise(  mad( ( Lhs.Low ) , ( Rhs ) , ( P.Low ) ) );
	return DFFastTwoSum(P.High, T);
}
FDFVector3 DFMultiply(float3 Lhs, FDFVector3 Rhs) { return DFMultiply(Rhs, Lhs); }
FDFVector3 DFFastDivide(FDFVector3 Lhs, FDFVector3 Rhs);
FDFVector3 DFFastDivide(FDFVector3 Lhs, FDFVector3 Rhs)
{
	const float3 Th =   MakePrecise( ( Lhs.High ) / ( Rhs.High ) );
	const FDFVector3 R = DFMultiply(Rhs, Th);
	const float3 Ph =   MakePrecise( ( Lhs.High ) - ( R.High ) );
	const float3 Dl =   MakePrecise( ( Lhs.Low ) - ( R.Low ) );
	const float3 D =   MakePrecise( ( Ph ) + ( Dl ) );
	const float3 Tl =   MakePrecise( ( D ) / ( Rhs.High ) );
	return DFFastTwoSum(Th, Tl);
}
FDFVector3 DFFastDivide(FDFVector3 Lhs, float3 Rhs)
{
	const float3 Th =   MakePrecise( ( Lhs.High ) / ( Rhs ) );
	const FDFVector3 R = DFTwoProduct(Rhs, Th);
	const float3 Ph =   MakePrecise( ( Lhs.High ) - ( R.High ) );
	const float3 Dl =   MakePrecise( ( Lhs.Low ) - ( R.Low ) );
	const float3 D =   MakePrecise( ( Ph ) + ( Dl ) );
	const float3 Tl =   MakePrecise( ( D ) / ( Rhs ) );
	return DFFastTwoSum(Th, Tl);
}
FDFVector3 DFFastDivide(float3 Lhs, FDFVector3 Rhs) { return DFFastDivide(DFPromote(Lhs), Rhs); }
FDFVector3 DFFastDivide(float3 Lhs, float3 Rhs) { return DFFastDivide(DFPromote(Lhs), Rhs); }
FDFVector3 DFBroadcast3(FDFScalar V)
{
	const float3 High = V.High;
	const float3 Low = V.Low;
	return MakeDFVector3(High, Low);
}
float3 DFBroadcast3(float V)
{
	const float3 Single = V;
	return Single;
}
FDFVector3  DFMultiply (FDFScalar Lhs, FDFVector3 Rhs) { return DFMultiply (DFBroadcast3(Lhs), Rhs); }
FDFVector3  DFMultiply (float Lhs, FDFVector3 Rhs) { return DFMultiply (DFBroadcast3(Lhs), Rhs); }
FDFVector3  DFMultiply (FDFScalar Lhs, float3 Rhs) { return DFMultiply (DFBroadcast3(Lhs), Rhs); }
FDFVector3  DFMultiply (float Lhs, float3 Rhs) { return DFMultiply (DFBroadcast3(Lhs), Rhs); }
FDFVector3  DFMultiply (FDFVector3 Lhs, FDFScalar Rhs) { return DFMultiply (Lhs, DFBroadcast3(Rhs)); }
FDFVector3  DFMultiply (FDFVector3 Lhs, float Rhs)     { return DFMultiply (Lhs, DFBroadcast3(Rhs)); }
FDFVector3  DFMultiply (float3 Lhs, FDFScalar Rhs) { return DFMultiply (Lhs, DFBroadcast3(Rhs)); }
FDFVector3  DFMultiply (float3 Lhs, float Rhs) { return DFMultiply (Lhs, DFBroadcast3(Rhs)); }
FDFVector3  DFFastDivide (FDFScalar Lhs, FDFVector3 Rhs) { return DFFastDivide (DFBroadcast3(Lhs), Rhs); }
FDFVector3  DFFastDivide (float Lhs, FDFVector3 Rhs) { return DFFastDivide (DFBroadcast3(Lhs), Rhs); }
FDFVector3  DFFastDivide (FDFScalar Lhs, float3 Rhs) { return DFFastDivide (DFBroadcast3(Lhs), Rhs); }
FDFVector3  DFFastDivide (float Lhs, float3 Rhs) { return DFFastDivide (DFBroadcast3(Lhs), Rhs); }
FDFVector3  DFFastDivide (FDFVector3 Lhs, FDFScalar Rhs) { return DFFastDivide (Lhs, DFBroadcast3(Rhs)); }
FDFVector3  DFFastDivide (FDFVector3 Lhs, float Rhs)     { return DFFastDivide (Lhs, DFBroadcast3(Rhs)); }
FDFVector3  DFFastDivide (float3 Lhs, FDFScalar Rhs) { return DFFastDivide (Lhs, DFBroadcast3(Rhs)); }
FDFVector3  DFFastDivide (float3 Lhs, float Rhs) { return DFFastDivide (Lhs, DFBroadcast3(Rhs)); }
struct FDFVector4
{
	float4 High;
	float4 Low;
};
FDFVector4 MakeDFVector4(float4 High, float4 Low)
{
	FDFVector4 Result;
	Result.High = High;
	Result.Low = Low;
	return Result;
}
FDFVector4 DFPromote(FDFVector4 Value) { return Value; }
FDFVector4 DFPromote(float4 Value) { return MakeDFVector4(Value, (float4)0); }
FDFVector4 DFTwoSum(float4 Lhs, float4 Rhs)
{
	const float4 S =   MakePrecise( ( Lhs ) + ( Rhs ) );
	const float4 V =   MakePrecise( ( S ) - ( Lhs ) );
	const float4 Q =   MakePrecise( ( S ) - ( V ) );
	const float4 R =   MakePrecise( ( Lhs ) - ( Q ) );
	const float4 T =   MakePrecise( ( Rhs ) - ( V ) );
	const float4 Y =   MakePrecise( ( R ) + ( T ) );
	return MakeDFVector4(S, Y);
}
FDFVector4 DFFastTwoSum(float4 Lhs, float4 Rhs)
{
	const float4 S =   MakePrecise( ( Lhs ) + ( Rhs ) );
	const float4 T =   MakePrecise( ( S ) - ( Lhs ) );
	const float4 E =   MakePrecise( ( Rhs ) - ( T ) );
	return MakeDFVector4(S, E);
}
FDFVector4 DFTwoProduct(float4 Lhs, float4 Rhs)
{
	const float4 P = Lhs * Rhs;
	const float4 E =   MakePrecise(  mad( ( Lhs ) , ( Rhs ) , ( -P ) ) );
	return MakeDFVector4(P, E);
}
FDFVector4 DFMultiply(float4 Lhs, float4 Rhs) { return DFTwoProduct(Lhs, Rhs); }
FDFVector4 DFMultiply(FDFVector4 Lhs, FDFVector4 Rhs)
{
	const FDFVector4 P = DFTwoProduct(Lhs.High, Rhs.High);
	float4 T =   MakePrecise( ( Lhs.High ) * ( Rhs.Low ) );
	T =   MakePrecise(  mad( ( Lhs.Low ) , ( Rhs.High ) , ( T ) ) );
	T =   MakePrecise( ( T ) + ( P.Low ) );
	return DFFastTwoSum(P.High, T);
}
FDFVector4 DFMultiply(FDFVector4 Lhs, float4 Rhs)
{
	FDFVector4 P = DFTwoProduct(Lhs.High, Rhs);
	float4 T =   MakePrecise(  mad( ( Lhs.Low ) , ( Rhs ) , ( P.Low ) ) );
	return DFFastTwoSum(P.High, T);
}
FDFVector4 DFMultiply(float4 Lhs, FDFVector4 Rhs) { return DFMultiply(Rhs, Lhs); }
FDFVector4 DFFastDivide(FDFVector4 Lhs, FDFVector4 Rhs);
FDFVector4 DFFastDivide(FDFVector4 Lhs, FDFVector4 Rhs)
{
	const float4 Th =   MakePrecise( ( Lhs.High ) / ( Rhs.High ) );
	const FDFVector4 R = DFMultiply(Rhs, Th);
	const float4 Ph =   MakePrecise( ( Lhs.High ) - ( R.High ) );
	const float4 Dl =   MakePrecise( ( Lhs.Low ) - ( R.Low ) );
	const float4 D =   MakePrecise( ( Ph ) + ( Dl ) );
	const float4 Tl =   MakePrecise( ( D ) / ( Rhs.High ) );
	return DFFastTwoSum(Th, Tl);
}
FDFVector4 DFFastDivide(FDFVector4 Lhs, float4 Rhs)
{
	const float4 Th =   MakePrecise( ( Lhs.High ) / ( Rhs ) );
	const FDFVector4 R = DFTwoProduct(Rhs, Th);
	const float4 Ph =   MakePrecise( ( Lhs.High ) - ( R.High ) );
	const float4 Dl =   MakePrecise( ( Lhs.Low ) - ( R.Low ) );
	const float4 D =   MakePrecise( ( Ph ) + ( Dl ) );
	const float4 Tl =   MakePrecise( ( D ) / ( Rhs ) );
	return DFFastTwoSum(Th, Tl);
}
FDFVector4 DFFastDivide(float4 Lhs, FDFVector4 Rhs) { return DFFastDivide(DFPromote(Lhs), Rhs); }
FDFVector4 DFFastDivide(float4 Lhs, float4 Rhs) { return DFFastDivide(DFPromote(Lhs), Rhs); }
FDFVector4 DFBroadcast4(FDFScalar V)
{
	const float4 High = V.High;
	const float4 Low = V.Low;
	return MakeDFVector4(High, Low);
}
float4 DFBroadcast4(float V)
{
	const float4 Single = V;
	return Single;
}
FDFVector4  DFMultiply (FDFScalar Lhs, FDFVector4 Rhs) { return DFMultiply (DFBroadcast4(Lhs), Rhs); }
FDFVector4  DFMultiply (float Lhs, FDFVector4 Rhs) { return DFMultiply (DFBroadcast4(Lhs), Rhs); }
FDFVector4  DFMultiply (FDFScalar Lhs, float4 Rhs) { return DFMultiply (DFBroadcast4(Lhs), Rhs); }
FDFVector4  DFMultiply (float Lhs, float4 Rhs) { return DFMultiply (DFBroadcast4(Lhs), Rhs); }
FDFVector4  DFMultiply (FDFVector4 Lhs, FDFScalar Rhs) { return DFMultiply (Lhs, DFBroadcast4(Rhs)); }
FDFVector4  DFMultiply (FDFVector4 Lhs, float Rhs)     { return DFMultiply (Lhs, DFBroadcast4(Rhs)); }
FDFVector4  DFMultiply (float4 Lhs, FDFScalar Rhs) { return DFMultiply (Lhs, DFBroadcast4(Rhs)); }
FDFVector4  DFMultiply (float4 Lhs, float Rhs) { return DFMultiply (Lhs, DFBroadcast4(Rhs)); }
FDFVector4  DFFastDivide (FDFScalar Lhs, FDFVector4 Rhs) { return DFFastDivide (DFBroadcast4(Lhs), Rhs); }
FDFVector4  DFFastDivide (float Lhs, FDFVector4 Rhs) { return DFFastDivide (DFBroadcast4(Lhs), Rhs); }
FDFVector4  DFFastDivide (FDFScalar Lhs, float4 Rhs) { return DFFastDivide (DFBroadcast4(Lhs), Rhs); }
FDFVector4  DFFastDivide (float Lhs, float4 Rhs) { return DFFastDivide (DFBroadcast4(Lhs), Rhs); }
FDFVector4  DFFastDivide (FDFVector4 Lhs, FDFScalar Rhs) { return DFFastDivide (Lhs, DFBroadcast4(Rhs)); }
FDFVector4  DFFastDivide (FDFVector4 Lhs, float Rhs)     { return DFFastDivide (Lhs, DFBroadcast4(Rhs)); }
FDFVector4  DFFastDivide (float4 Lhs, FDFScalar Rhs) { return DFFastDivide (Lhs, DFBroadcast4(Rhs)); }
FDFVector4  DFFastDivide (float4 Lhs, float Rhs) { return DFFastDivide (Lhs, DFBroadcast4(Rhs)); }
struct FDFMatrix
{
	float4x4 M;
	float3 PostTranslation; 
};
float4x4 Make4x3Matrix(float4x4 M)
{
	float4x4 Result;
	Result[0] = float4(M[0].xyz, 0.0f);
	Result[1] = float4(M[1].xyz, 0.0f);
	Result[2] = float4(M[2].xyz, 0.0f);
	Result[3] = float4(M[3].xyz, 1.0f);
	return Result;
}
float4x4 MakeTranslationMatrix(float3 Offset)
{
	float4x4 Result;
	Result[0] = float4(1.0f, 0.0f, 0.0f, 0.0f);
	Result[1] = float4(0.0f, 1.0f, 0.0f, 0.0f);
	Result[2] = float4(0.0f, 0.0f, 1.0f, 0.0f);
	Result[3] = float4(Offset, 1.0f);
	return Result;
}
FDFMatrix MakeDFMatrix4x3(float3 PostTranslation, float4x4 InMatrix)
{
	FDFMatrix Result;
	Result.PostTranslation = PostTranslation;
	Result.M = Make4x3Matrix(InMatrix);
	return Result;
}
FDFMatrix MakeDFMatrix(float3 PostTranslation, float4x4 InMatrix)
{
	FDFMatrix Result;
	Result.PostTranslation = PostTranslation;
	Result.M = InMatrix;
	return Result;
}
struct FDFInverseMatrix
{
	float4x4 M;
	float3 PreTranslation; 
	int Dummy; 
};
FDFInverseMatrix MakeDFInverseMatrix(float3 PreTranslation, float4x4 InMatrix)
{
	FDFInverseMatrix Result;
	Result.PreTranslation = PreTranslation;
	Result.M = InMatrix;
	Result.Dummy = 0;
	return Result;
}
FDFInverseMatrix MakeDFInverseMatrix4x3(float3 PreTranslation, float4x4 InMatrix)
{
	FDFInverseMatrix Result;
	Result.PreTranslation = PreTranslation;
	Result.M = Make4x3Matrix(InMatrix);
	Result.Dummy = 0;
	return Result;
}
FDFVector3 DFMultiply(float3 Vector, FDFMatrix InMatrix)
{
	float4 Result = mul(float4(Vector, 1), InMatrix.M);
	FDFVector3 V = DFTwoSum(InMatrix.PostTranslation, Result.xyz);
	return V;
}
FDFVector4 DFMultiply(float4 Vector, FDFMatrix InMatrix)
{
	float4 Result = mul(Vector, InMatrix.M);
	FDFVector4 V = DFTwoSum(float4(InMatrix.PostTranslation, 0), Result);
	return V;
}
FDFInverseMatrix DFMultiply(FDFInverseMatrix Lhs, float4x4 Rhs)
{
	float4x4 M = mul(Lhs.M, Rhs);
	float3 PreTranslation = Lhs.PreTranslation;
	return MakeDFInverseMatrix(PreTranslation, M);
}
FDFMatrix DFMultiply(float4x4 Lhs, FDFMatrix Rhs)
{
	float4x4 M = mul(Lhs, Rhs.M);
	float3 PostTranslation = Rhs.PostTranslation;
	return MakeDFMatrix(PostTranslation, M);
}
float4x4 MultiplyTranslation(float4x4 M, float3 Translation)
{
	float4x4 Result = M;
	Result[3].xyz += Translation;
	return Result;
}
float4x4 MultiplyTranslation(float3 Translation, float4x4 M)
{
	return mul(MakeTranslationMatrix(Translation), M);
}
FDFMatrix DFPromote(FDFMatrix Value) { return Value; }
FDFMatrix  DFPromote(float4x4 Value) { return MakeDFMatrix((float3)0, Value); }
FDFVector3 DFMultiplyLHSAndFastTwoSum(float3 Lhs, float Factor, float3 Rhs)
{
	const float3 S =  MakePrecise(  mad( Lhs , Factor , Rhs ) );
	const float3 E =  MakePrecise( Rhs -  mad( -Lhs , Factor , S ) );
	return MakeDFVector3(S, E);
}
struct FLWCScalar
{
	float Tile;
	float Offset;
	int Dummy; 
};
struct FLWCVector2
{
	float2 Tile;
	float2 Offset;
	int Dummy; 
};
struct FLWCVector3
{
	float3 Tile;
	float3 Offset;
	int Dummy; 
};
struct FLWCVector4
{
	float4 Tile;
	float4 Offset;
	int Dummy; 
};
struct FLWCMatrix
{
	float4x4 M;
	float3 Tile; 
	int2 Dummy; 
};
struct FLWCInverseMatrix
{
	float4x4 M;
	float3 Tile; 
	int3 Dummy; 
};
FLWCScalar MakeLWCScalar(float Tile, float Offset)
{
	FLWCScalar Result;
	 ( Result ).Tile = ( Tile );
	Result.Offset = Offset;
	Result.Dummy = 0;
	return Result;
}
FLWCVector2 MakeLWCVector2(float2 Tile, float2 Offset)
{
	FLWCVector2 Result;
	 ( Result ).Tile = ( Tile );
	Result.Offset = Offset;
	Result.Dummy = 0;
	return Result;
}
FLWCVector3 MakeLWCVector3(float3 Tile, float3 Offset)
{
	FLWCVector3 Result;
	 ( Result ).Tile = ( Tile );
	Result.Offset = Offset;
	Result.Dummy = 0;
	return Result;
}
FLWCVector4 MakeLWCVector4(float4 Tile, float4 Offset)
{
	FLWCVector4 Result;
	 ( Result ).Tile = ( Tile );
	Result.Offset = Offset;
	Result.Dummy = 0;
	return Result;
}
FLWCVector4 MakeLWCVector4(float3 Tile, float4 Offset)
{
	return MakeLWCVector4(float4(Tile, 0), Offset);
}
FLWCVector4 MakeLWCVector4(FLWCVector3 XYZ, float W)
{
	return MakeLWCVector4( (( XYZ ).Tile), float4(XYZ.Offset, W));
}
FLWCMatrix MakeLWCMatrix(float3 Tile, float4x4 InMatrix)
{
	FLWCMatrix Result;
	 ( Result ).Tile = ( Tile );
	Result.M = InMatrix;
	Result.Dummy = 0;
	return Result;
}
FLWCInverseMatrix MakeLWCInverseMatrix(float3 Tile, float4x4 InMatrix)
{
	FLWCInverseMatrix Result;
	 ( Result ).Tile = ( -Tile );
	Result.M = InMatrix;
	Result.Dummy = 0;
	return Result;
}
FLWCScalar LWCSubtract(FLWCScalar Lhs, FLWCScalar Rhs) { return MakeLWCScalar( (( Lhs ).Tile) -  (( Rhs ).Tile), Lhs.Offset - Rhs.Offset); }
FLWCScalar LWCSubtract(float Lhs, FLWCScalar Rhs) { return MakeLWCScalar(- (( Rhs ).Tile), Lhs - Rhs.Offset); }
FLWCScalar LWCSubtract(FLWCScalar Lhs, float Rhs) { return MakeLWCScalar( (( Lhs ).Tile), Lhs.Offset - Rhs); }
FLWCVector2 LWCSubtract(FLWCVector2 Lhs, FLWCVector2 Rhs) { return MakeLWCVector2( (( Lhs ).Tile) -  (( Rhs ).Tile), Lhs.Offset - Rhs.Offset); }
FLWCVector2 LWCSubtract(float2 Lhs, FLWCVector2 Rhs) { return MakeLWCVector2(- (( Rhs ).Tile), Lhs - Rhs.Offset); }
FLWCVector2 LWCSubtract(FLWCVector2 Lhs, float2 Rhs) { return MakeLWCVector2( (( Lhs ).Tile), Lhs.Offset - Rhs); }
FLWCVector3 LWCSubtract(FLWCVector3 Lhs, FLWCVector3 Rhs) { return MakeLWCVector3( (( Lhs ).Tile) -  (( Rhs ).Tile), Lhs.Offset - Rhs.Offset); }
FLWCVector3 LWCSubtract(float3 Lhs, FLWCVector3 Rhs) { return MakeLWCVector3(- (( Rhs ).Tile), Lhs - Rhs.Offset); }
FLWCVector3 LWCSubtract(FLWCVector3 Lhs, float3 Rhs) { return MakeLWCVector3( (( Lhs ).Tile), Lhs.Offset - Rhs); }
FLWCVector4 LWCSubtract(FLWCVector4 Lhs, FLWCVector4 Rhs) { return MakeLWCVector4( (( Lhs ).Tile) -  (( Rhs ).Tile), Lhs.Offset - Rhs.Offset); }
FLWCVector4 LWCSubtract(float4 Lhs, FLWCVector4 Rhs) { return MakeLWCVector4(- (( Rhs ).Tile), Lhs - Rhs.Offset); }
FLWCVector4 LWCSubtract(FLWCVector4 Lhs, float4 Rhs) { return MakeLWCVector4( (( Lhs ).Tile), Lhs.Offset - Rhs); }
FLWCScalar DFToTileOffset( FDFScalar In)																								{ float Tile =  MakePrecise( round(In.High / 2097152.00f) ); float Offset =   MakePrecise( (   MakePrecise(  mad( ( Tile ) , ( -2097152.00f ) , ( In.High ) ) ) ) + ( In.Low ) );																																								return MakeLWCScalar (Tile, Offset);																						}
FLWCVector2 DFToTileOffset( FDFVector2 In)																								{ float2 Tile =  MakePrecise( round(In.High / 2097152.00f) ); float2 Offset =   MakePrecise( (   MakePrecise(  mad( ( Tile ) , ( -2097152.00f ) , ( In.High ) ) ) ) + ( In.Low ) );																																								return MakeLWCVector2 (Tile, Offset);																						}
FLWCVector3 DFToTileOffset( FDFVector3 In)																								{ float3 Tile =  MakePrecise( round(In.High / 2097152.00f) ); float3 Offset =   MakePrecise( (   MakePrecise(  mad( ( Tile ) , ( -2097152.00f ) , ( In.High ) ) ) ) + ( In.Low ) );																																								return MakeLWCVector3 (Tile, Offset);																						}
FLWCVector4 DFToTileOffset( FDFVector4 In)																								{ float4 Tile =  MakePrecise( round(In.High / 2097152.00f) ); float4 Offset =   MakePrecise( (   MakePrecise(  mad( ( Tile ) , ( -2097152.00f ) , ( In.High ) ) ) ) + ( In.Low ) );																																								return MakeLWCVector4 (Tile, Offset);																						}
FLWCScalar DFFastToTileOffset( FDFScalar In)																							{ float Tile = In.High * (1 / 2097152.00f); float Offset = In.Low; 																																																									return MakeLWCScalar (Tile, Offset);																						}
FLWCVector2 DFFastToTileOffset( FDFVector2 In)																							{ float2 Tile = In.High * (1 / 2097152.00f); float2 Offset = In.Low; 																																																									return MakeLWCVector2 (Tile, Offset);																						}
FLWCVector3 DFFastToTileOffset( FDFVector3 In)																							{ float3 Tile = In.High * (1 / 2097152.00f); float3 Offset = In.Low; 																																																									return MakeLWCVector3 (Tile, Offset);																						}
FLWCVector4 DFFastToTileOffset( FDFVector4 In)																							{ float4 Tile = In.High * (1 / 2097152.00f); float4 Offset = In.Low; 																																																									return MakeLWCVector4 (Tile, Offset);																						}
FLWCMatrix DFToTileOffset(FDFMatrix In)
{
	FLWCVector3 PosHigh = DFToTileOffset(MakeDFVector3(In.PostTranslation, 0));
	float4x4 M = MultiplyTranslation(In.M, PosHigh.Offset);
	float3 Tile = PosHigh.Tile;
	return MakeLWCMatrix(Tile, M);
}
FLWCMatrix DFFastToTileOffset(FDFMatrix In)
{
	float4x4 M = In.M;
	float3 Tile = In.PostTranslation / 2097152.00f;
	return MakeLWCMatrix(Tile, M);
}
FLWCInverseMatrix DFToTileOffset(FDFInverseMatrix In)
{
	FLWCVector3 PosHigh = DFToTileOffset(MakeDFVector3(In.PreTranslation, 0));
	float4x4 M = MultiplyTranslation(-PosHigh.Offset, In.M);
	float3 Tile = PosHigh.Tile;
	return MakeLWCInverseMatrix(Tile, M);
}
FLWCInverseMatrix DFFastToTileOffset(FDFInverseMatrix In)
{
	float4x4 M = In.M;
	float3 Tile = In.PreTranslation / 2097152.00f;
	return MakeLWCInverseMatrix(Tile, M);
}
FDFScalar DFFromTileOffset(FLWCScalar In)
{
	float TileOffset = In.Tile * 2097152.00f;
	return DFFastTwoSum(TileOffset, In.Offset);
}
FDFVector2 DFFromTileOffset(FLWCVector2 In)
{
	float2 TileOffset = In.Tile * 2097152.00f;
	return DFFastTwoSum(TileOffset, In.Offset);
}
FDFVector3 DFFromTileOffset(FLWCVector3 In)
{
	float3 TileOffset = In.Tile * 2097152.00f;
	return DFFastTwoSum(TileOffset, In.Offset);
}
FDFVector4 DFFromTileOffset(FLWCVector4 In)
{
	float4 TileOffset = In.Tile * 2097152.00f;
	return DFFastTwoSum(TileOffset, In.Offset);
}
FDFMatrix DFFromTileOffset(FLWCMatrix In)
{
	float4x4 M = In.M;
	float3 PostTranslation = In.Tile * 2097152.00f;
	return MakeDFMatrix(PostTranslation, M);
}
FDFInverseMatrix DFFromTileOffset(FLWCInverseMatrix In)
{
	float4x4 M = In.M;
	float3 PreTranslation = -In.Tile * 2097152.00f;
	return MakeDFInverseMatrix(PreTranslation, M);
}
struct FViewConstants {
	 float4x4    TranslatedWorldToClip ;
	 float4x4    RelativeWorldToClip ;
	 float4x4    ClipToRelativeWorld ;
	 float4x4    TranslatedWorldToView ;
	 float4x4    ViewToTranslatedWorld ;
	 float4x4    TranslatedWorldToCameraView ;
	 float4x4    CameraViewToTranslatedWorld ;
	 float4x4    ViewToClip ;
	 float4x4    ViewToClipNoAA ;
	 float4x4    ClipToView ;
	 float4x4    ClipToTranslatedWorld ;
	 float4x4    SVPositionToTranslatedWorld ;
	 float4x4    ScreenToRelativeWorld ;
	 float4x4    ScreenToTranslatedWorld ;
	 float4x4    MobileMultiviewShadowTransform ;
	 float3    ViewOriginHigh ;
	 float    Padding972 ;
	 float3    ViewForward ;
	 float    Padding988 ;
	 float3    ViewUp ;
	 float    Padding1004 ;
	 float3    ViewRight ;
	 float    Padding1020 ;
	 float3    HMDViewNoRollUp ;
	 float    Padding1036 ;
	 float3    HMDViewNoRollRight ;
	 float    Padding1052 ;
	 float4    InvDeviceZToWorldZTransform ;
	 float4    ScreenPositionScaleBias ;
	 float3    ViewOriginLow ;
	 float    Padding1100 ;
	 float3    TranslatedWorldCameraOrigin ;
	 float    Padding1116 ;
	 float3    WorldViewOriginHigh ;
	 float    Padding1132 ;
	 float3    WorldViewOriginLow ;
	 float    Padding1148 ;
	 float3    PreViewTranslationHigh ;
	 float    Padding1164 ;
	 float3    PreViewTranslationLow ;
	 float    Padding1180 ;
	 float4x4    PrevViewToClip ;
	 float4x4    PrevClipToView ;
	 float4x4    PrevTranslatedWorldToClip ;
	 float4x4    PrevTranslatedWorldToView ;
	 float4x4    PrevViewToTranslatedWorld ;
	 float4x4    PrevTranslatedWorldToCameraView ;
	 float4x4    PrevCameraViewToTranslatedWorld ;
	 float3    PrevTranslatedWorldCameraOrigin ;
	 float    Padding1644 ;
	 float3    PrevWorldCameraOriginHigh ;
	 float    Padding1660 ;
	 float3    PrevWorldCameraOriginLow ;
	 float    Padding1676 ;
	 float3    PrevWorldViewOriginHigh ;
	 float    Padding1692 ;
	 float3    PrevWorldViewOriginLow ;
	 float    Padding1708 ;
	 float3    PrevPreViewTranslationHigh ;
	 float    Padding1724 ;
	 float3    PrevPreViewTranslationLow ;
	 float    Padding1740 ;
	 float3    ViewTilePosition ;
	 float    Padding1756 ;
	 float3    RelativeWorldCameraOriginTO ;
	 float    Padding1772 ;
	 float3    RelativeWorldViewOriginTO ;
	 float    Padding1788 ;
	 float3    RelativePreViewTranslationTO ;
	 float    Padding1804 ;
	 float3    PrevRelativeWorldCameraOriginTO ;
	 float    Padding1820 ;
	 float3    PrevRelativeWorldViewOriginTO ;
	 float    Padding1836 ;
	 float3    RelativePrevPreViewTranslationTO ;
	 float    Padding1852 ;
	 float4x4    PrevClipToRelativeWorld ;
	 float4x4    PrevScreenToTranslatedWorld ;
	 float4x4    ClipToPrevClip ;
	 float4x4    ClipToPrevClipWithAA ;
	 float4    TemporalAAJitter ;
	 float4    GlobalClippingPlane ;
	 float2    FieldOfViewWideAngles ;
	 float2    PrevFieldOfViewWideAngles ;
	 float4    ViewRectMin ;
	 float4    ViewSizeAndInvSize ;
	 uint4    ViewRectMinAndSize ;
	 float4    LightProbeSizeRatioAndInvSizeRatio ;
	 float4    BufferSizeAndInvSize ;
	 float4    BufferBilinearUVMinMax ;
	 float4    ScreenToViewSpace ;
	 float2    BufferToSceneTextureScale ;
	 float2    ResolutionFractionAndInv ;
	 int    NumSceneColorMSAASamples ;
	 float    ProjectionDepthThicknessScale ;
	 float    PreExposure ;
	 float    OneOverPreExposure ;
	 float4    DiffuseOverrideParameter ;
	 float4    SpecularOverrideParameter ;
	 float4    NormalOverrideParameter ;
	 float2    RoughnessOverrideParameter ;
	 float    PrevFrameGameTime ;
	 float    PrevFrameRealTime ;
	 float    OutOfBoundsMask ;
	 float    Padding2372 ;
	 float    Padding2376 ;
	 float    Padding2380 ;
	 float3    WorldCameraMovementSinceLastFrame ;
	 float    CullingSign ;
	 float    NearPlane ;
	 float    GameTime ;
	 float    RealTime ;
	 float    DeltaTime ;
	 float    MaterialTextureMipBias ;
	 float    MaterialTextureDerivativeMultiply ;
	 uint    Random ;
	 uint    FrameNumber ;
	 uint    FrameCounter ;
	 uint    StateFrameIndexMod8 ;
	 uint    StateFrameIndex ;
	 uint    DebugViewModeMask ;
	 uint    WorldIsPaused ;
	 float    CameraCut ;
	 float    UnlitViewmodeMask ;
	 float    Padding2460 ;
	 float4    DirectionalLightColor ;
	 float3    DirectionalLightDirection ;
	 float    Padding2492 ;
	 float4    TranslucencyLightingVolumeMin[2] ;
	 float4    TranslucencyLightingVolumeInvSize[2] ;
	 float4    TemporalAAParams ;
	 float4    CircleDOFParams ;
	 float    DepthOfFieldSensorWidth ;
	 float    DepthOfFieldFocalDistance ;
	 float    DepthOfFieldScale ;
	 float    DepthOfFieldFocalLength ;
	 float    DepthOfFieldFocalRegion ;
	 float    DepthOfFieldNearTransitionRegion ;
	 float    DepthOfFieldFarTransitionRegion ;
	 float    MotionBlurNormalizedToPixel ;
	 float    GeneralPurposeTweak ;
	 float    GeneralPurposeTweak2 ;
	 float    DemosaicVposOffset ;
	 float    DecalDepthBias ;
	 float3    IndirectLightingColorScale ;
	 float    Padding2652 ;
	 float3    PrecomputedIndirectLightingColorScale ;
	 float    Padding2668 ;
	 float3    PrecomputedIndirectSpecularColorScale ;
	 float    Padding2684 ;
	 float4    AtmosphereLightDirection[2] ;
	 float4    AtmosphereLightIlluminanceOnGroundPostTransmittance[2] ;
	 float4    AtmosphereLightIlluminanceOuterSpace[2] ;
	 float4    AtmosphereLightDiscLuminance[2] ;
	 float4    AtmosphereLightDiscCosHalfApexAngle_PPTrans[2] ;
	 float4    SkyViewLutSizeAndInvSize ;
	 float3    SkyCameraTranslatedWorldOrigin ;
	 float    Padding2876 ;
	 float4    SkyPlanetTranslatedWorldCenterAndViewHeight ;
	 float4x4    SkyViewLutReferential ;
	 float4    SkyAtmosphereSkyLuminanceFactor ;
	 float    SkyAtmospherePresentInScene ;
	 float    SkyAtmosphereHeightFogContribution ;
	 float    SkyAtmosphereBottomRadiusKm ;
	 float    SkyAtmosphereTopRadiusKm ;
	 float4    SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize ;
	 float    SkyAtmosphereAerialPerspectiveStartDepthKm ;
	 float    SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution ;
	 float    SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv ;
	 float    SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm ;
	 float    SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv ;
	 float    SkyAtmosphereApplyCameraAerialPerspectiveVolume ;
	 float    Padding3032 ;
	 float    Padding3036 ;
	 float3    NormalCurvatureToRoughnessScaleBias ;
	 float    RenderingReflectionCaptureMask ;
	 float    RealTimeReflectionCapture ;
	 float    RealTimeReflectionCapturePreExposure ;
	 float    Padding3064 ;
	 float    Padding3068 ;
	 float4    AmbientCubemapTint ;
	 float    AmbientCubemapIntensity ;
	 float    SkyLightApplyPrecomputedBentNormalShadowingFlag ;
	 float    SkyLightAffectReflectionFlag ;
	 float    SkyLightAffectGlobalIlluminationFlag ;
	 float4    SkyLightColor ;
	 float    SkyLightVolumetricScatteringIntensity ;
	 float    Padding3124 ;
	 float    Padding3128 ;
	 float    Padding3132 ;
	 float4    MobileSkyIrradianceEnvironmentMap[8] ;
	 float    MobilePreviewMode ;
	 float    HMDEyePaddingOffset ;
	 float    ReflectionCubemapMaxMip ;
	 float    ShowDecalsMask ;
	 uint    DistanceFieldAOSpecularOcclusionMode ;
	 float    IndirectCapsuleSelfShadowingIntensity ;
	 float    Padding3288 ;
	 float    Padding3292 ;
	 float3    ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight ;
	 int    StereoPassIndex ;
	 float4    GlobalVolumeTranslatedCenterAndExtent[6] ;
	 float4    GlobalVolumeTranslatedWorldToUVAddAndMul[6] ;
	 float4    GlobalDistanceFieldMipTranslatedWorldToUVScale[6] ;
	 float4    GlobalDistanceFieldMipTranslatedWorldToUVBias[6] ;
	 float    GlobalDistanceFieldMipFactor ;
	 float    GlobalDistanceFieldMipTransition ;
	 int    GlobalDistanceFieldClipmapSizeInPages ;
	 int    Padding3708 ;
	 float3    GlobalDistanceFieldInvPageAtlasSize ;
	 float    Padding3724 ;
	 float3    GlobalDistanceFieldInvCoverageAtlasSize ;
	 float    GlobalVolumeDimension ;
	 float    GlobalVolumeTexelSize ;
	 float    MaxGlobalDFAOConeDistance ;
	 uint    NumGlobalSDFClipmaps ;
	 float    CoveredExpandSurfaceScale ;
	 float    NotCoveredExpandSurfaceScale ;
	 float    NotCoveredMinStepScale ;
	 float    DitheredTransparencyStepThreshold ;
	 float    DitheredTransparencyTraceThreshold ;
	 int2    CursorPosition ;
	 float    bCheckerboardSubsurfaceProfileRendering ;
	 float    Padding3788 ;
	 float3    VolumetricFogInvGridSize ;
	 float    Padding3804 ;
	 float3    VolumetricFogGridZParams ;
	 float    Padding3820 ;
	 float2    VolumetricFogSVPosToVolumeUV ;
	 float2    VolumetricFogViewGridUVToPrevViewRectUV ;
	 float2    VolumetricFogPrevViewGridRectUVToResourceUV ;
	 float2    VolumetricFogPrevUVMax ;
	 float2    VolumetricFogPrevUVMaxForTemporalBlend ;
	 float2    VolumetricFogScreenToResourceUV ;
	 float2    VolumetricFogUVMax ;
	 float    VolumetricFogMaxDistance ;
	 float    Padding3884 ;
	 float3    VolumetricLightmapWorldToUVScale ;
	 float    Padding3900 ;
	 float3    VolumetricLightmapWorldToUVAdd ;
	 float    Padding3916 ;
	 float3    VolumetricLightmapIndirectionTextureSize ;
	 float    VolumetricLightmapBrickSize ;
	 float3    VolumetricLightmapBrickTexelSize ;
	 float    IndirectLightingCacheShowFlag ;
	 float    EyeToPixelSpreadAngle ;
	 float    Padding3956 ;
	 float    Padding3960 ;
	 float    Padding3964 ;
	 float4    XRPassthroughCameraUVs[2] ;
	 float    GlobalVirtualTextureMipBias ;
	 uint    VirtualTextureFeedbackShift ;
	 uint    VirtualTextureFeedbackMask ;
	 uint    VirtualTextureFeedbackStride ;
	 uint    VirtualTextureFeedbackJitterOffset ;
	 uint    VirtualTextureFeedbackSampleOffset ;
	 uint    Padding4024 ;
	 uint    Padding4028 ;
	 float4    RuntimeVirtualTextureMipLevel ;
	 float2    RuntimeVirtualTexturePackHeight ;
	 float    Padding4056 ;
	 float    Padding4060 ;
	 float4    RuntimeVirtualTextureDebugParams ;
	 int    FarShadowStaticMeshLODBias ;
	 float    MinRoughness ;
	 float    Padding4088 ;
	 float    Padding4092 ;
	 float4    HairRenderInfo ;
	 uint    EnableSkyLight ;
	 uint    HairRenderInfoBits ;
	 uint    HairComponents ;
	 float    bSubsurfacePostprocessEnabled ;
	 float4    SSProfilesTextureSizeAndInvSize ;
	 float4    SSProfilesPreIntegratedTextureSizeAndInvSize ;
	 float4    SpecularProfileTextureSizeAndInvSize ;
	 float3    PhysicsFieldClipmapCenter ;
	 float    PhysicsFieldClipmapDistance ;
	 int    PhysicsFieldClipmapResolution ;
	 int    PhysicsFieldClipmapExponent ;
	 int    PhysicsFieldClipmapCount ;
	 int    PhysicsFieldTargetCount ;
	 int4    PhysicsFieldTargets[32] ;
	 uint    GPUSceneViewId ;
	 float    ViewResolutionFraction ;
	 float    SubSurfaceColorAsTransmittanceAtDistanceInMeters ;
	 float    Padding4732 ;
	 float4    TanAndInvTanHalfFOV ;
	 float4    PrevTanAndInvTanHalfFOV ;
	 float2    WorldDepthToPixelWorldRadius ;
	 float    Padding4776 ;
	 float    Padding4780 ;
	 float4    ScreenRayLengthMultiplier ;
	 float4    GlintLUTParameters0 ;
	 float4    GlintLUTParameters1 ;
	 int4    EnvironmentComponentsFlags ;
	 uint    BindlessSampler_MaterialTextureBilinearWrapedSampler ;
	 uint    Padding4852 ;
	 uint    BindlessSampler_MaterialTextureBilinearClampedSampler ;
	 uint    Padding4860 ;
	 uint    BindlessSRV_VolumetricLightmapIndirectionTexture ;
	 uint    Padding4868 ;
	 uint    BindlessSRV_VolumetricLightmapBrickAmbientVector ;
	 uint    Padding4876 ;
	 uint    BindlessSRV_VolumetricLightmapBrickSHCoefficients0 ;
	 uint    Padding4884 ;
	 uint    BindlessSRV_VolumetricLightmapBrickSHCoefficients1 ;
	 uint    Padding4892 ;
	 uint    BindlessSRV_VolumetricLightmapBrickSHCoefficients2 ;
	 uint    Padding4900 ;
	 uint    BindlessSRV_VolumetricLightmapBrickSHCoefficients3 ;
	 uint    Padding4908 ;
	 uint    BindlessSRV_VolumetricLightmapBrickSHCoefficients4 ;
	 uint    Padding4916 ;
	 uint    BindlessSRV_VolumetricLightmapBrickSHCoefficients5 ;
	 uint    Padding4924 ;
	 uint    BindlessSRV_SkyBentNormalBrickTexture ;
	 uint    Padding4932 ;
	 uint    BindlessSRV_DirectionalLightShadowingBrickTexture ;
	 uint    Padding4940 ;
	 uint    BindlessSampler_VolumetricLightmapBrickAmbientVectorSampler ;
	 uint    Padding4948 ;
	 uint    BindlessSampler_VolumetricLightmapTextureSampler0 ;
	 uint    Padding4956 ;
	 uint    BindlessSampler_VolumetricLightmapTextureSampler1 ;
	 uint    Padding4964 ;
	 uint    BindlessSampler_VolumetricLightmapTextureSampler2 ;
	 uint    Padding4972 ;
	 uint    BindlessSampler_VolumetricLightmapTextureSampler3 ;
	 uint    Padding4980 ;
	 uint    BindlessSampler_VolumetricLightmapTextureSampler4 ;
	 uint    Padding4988 ;
	 uint    BindlessSampler_VolumetricLightmapTextureSampler5 ;
	 uint    Padding4996 ;
	 uint    BindlessSampler_SkyBentNormalTextureSampler ;
	 uint    Padding5004 ;
	 uint    BindlessSampler_DirectionalLightShadowingTextureSampler ;
	 uint    Padding5012 ;
	 uint    BindlessSRV_GlobalDistanceFieldPageAtlasTexture ;
	 uint    Padding5020 ;
	 uint    BindlessSRV_GlobalDistanceFieldCoverageAtlasTexture ;
	 uint    Padding5028 ;
	 uint    BindlessSRV_GlobalDistanceFieldPageTableTexture ;
	 uint    Padding5036 ;
	 uint    BindlessSRV_GlobalDistanceFieldMipTexture ;
	 uint    Padding5044 ;
	 uint    BindlessSampler_GlobalDistanceFieldPageAtlasTextureSampler ;
	 uint    Padding5052 ;
	 uint    BindlessSampler_GlobalDistanceFieldCoverageAtlasTextureSampler ;
	 uint    Padding5060 ;
	 uint    BindlessSampler_GlobalDistanceFieldMipTextureSampler ;
	 uint    Padding5068 ;
	 uint    BindlessSRV_AtmosphereTransmittanceTexture ;
	 uint    Padding5076 ;
	 uint    BindlessSampler_AtmosphereTransmittanceTextureSampler ;
	 uint    Padding5084 ;
	 uint    BindlessSRV_AtmosphereIrradianceTexture ;
	 uint    Padding5092 ;
	 uint    BindlessSampler_AtmosphereIrradianceTextureSampler ;
	 uint    Padding5100 ;
	 uint    BindlessSRV_AtmosphereInscatterTexture ;
	 uint    Padding5108 ;
	 uint    BindlessSampler_AtmosphereInscatterTextureSampler ;
	 uint    Padding5116 ;
	 uint    BindlessSRV_PerlinNoiseGradientTexture ;
	 uint    Padding5124 ;
	 uint    BindlessSampler_PerlinNoiseGradientTextureSampler ;
	 uint    Padding5132 ;
	 uint    BindlessSRV_PerlinNoise3DTexture ;
	 uint    Padding5140 ;
	 uint    BindlessSampler_PerlinNoise3DTextureSampler ;
	 uint    Padding5148 ;
	 uint    BindlessSRV_SobolSamplingTexture ;
	 uint    Padding5156 ;
	 uint    BindlessSampler_SharedPointWrappedSampler ;
	 uint    Padding5164 ;
	 uint    BindlessSampler_SharedPointClampedSampler ;
	 uint    Padding5172 ;
	 uint    BindlessSampler_SharedBilinearWrappedSampler ;
	 uint    Padding5180 ;
	 uint    BindlessSampler_SharedBilinearClampedSampler ;
	 uint    Padding5188 ;
	 uint    BindlessSampler_SharedBilinearAnisoClampedSampler ;
	 uint    Padding5196 ;
	 uint    BindlessSampler_SharedTrilinearWrappedSampler ;
	 uint    Padding5204 ;
	 uint    BindlessSampler_SharedTrilinearClampedSampler ;
	 uint    Padding5212 ;
	 uint    BindlessSRV_PreIntegratedBRDF ;
	 uint    Padding5220 ;
	 uint    BindlessSampler_PreIntegratedBRDFSampler ;
	 uint    Padding5228 ;
	 uint    BindlessSRV_SkyIrradianceEnvironmentMap ;
	 uint    Padding5236 ;
	 uint    BindlessSRV_TransmittanceLutTexture ;
	 uint    Padding5244 ;
	 uint    BindlessSampler_TransmittanceLutTextureSampler ;
	 uint    Padding5252 ;
	 uint    BindlessSRV_SkyViewLutTexture ;
	 uint    Padding5260 ;
	 uint    BindlessSampler_SkyViewLutTextureSampler ;
	 uint    Padding5268 ;
	 uint    BindlessSRV_DistantSkyLightLutTexture ;
	 uint    Padding5276 ;
	 uint    BindlessSampler_DistantSkyLightLutTextureSampler ;
	 uint    Padding5284 ;
	 uint    BindlessSRV_CameraAerialPerspectiveVolume ;
	 uint    Padding5292 ;
	 uint    BindlessSampler_CameraAerialPerspectiveVolumeSampler ;
	 uint    Padding5300 ;
	 uint    BindlessSRV_CameraAerialPerspectiveVolumeMieOnly ;
	 uint    Padding5308 ;
	 uint    BindlessSampler_CameraAerialPerspectiveVolumeMieOnlySampler ;
	 uint    Padding5316 ;
	 uint    BindlessSRV_CameraAerialPerspectiveVolumeRayOnly ;
	 uint    Padding5324 ;
	 uint    BindlessSampler_CameraAerialPerspectiveVolumeRayOnlySampler ;
	 uint    Padding5332 ;
	 uint    BindlessSRV_HairScatteringLUTTexture ;
	 uint    Padding5340 ;
	 uint    BindlessSampler_HairScatteringLUTSampler ;
	 uint    Padding5348 ;
	 uint    BindlessSRV_GGXLTCMatTexture ;
	 uint    Padding5356 ;
	 uint    BindlessSampler_GGXLTCMatSampler ;
	 uint    Padding5364 ;
	 uint    BindlessSRV_GGXLTCAmpTexture ;
	 uint    Padding5372 ;
	 uint    BindlessSampler_GGXLTCAmpSampler ;
	 uint    Padding5380 ;
	 uint    BindlessSRV_SheenLTCTexture ;
	 uint    Padding5388 ;
	 uint    BindlessSampler_SheenLTCSampler ;
	 uint    Padding5396 ;
	 uint    bShadingEnergyConservation ;
	 uint    bShadingEnergyPreservation ;
	 uint    BindlessSRV_ShadingEnergyGGXSpecTexture ;
	 uint    Padding5412 ;
	 uint    BindlessSRV_ShadingEnergyGGXGlassTexture ;
	 uint    Padding5420 ;
	 uint    BindlessSRV_ShadingEnergyClothSpecTexture ;
	 uint    Padding5428 ;
	 uint    BindlessSRV_ShadingEnergyDiffuseTexture ;
	 uint    Padding5436 ;
	 uint    BindlessSampler_ShadingEnergySampler ;
	 uint    Padding5444 ;
	 uint    BindlessSRV_GlintTexture ;
	 uint    Padding5452 ;
	 uint    BindlessSampler_GlintSampler ;
	 uint    Padding5460 ;
	 uint    BindlessSRV_SimpleVolumeTexture ;
	 uint    Padding5468 ;
	 uint    BindlessSampler_SimpleVolumeTextureSampler ;
	 uint    Padding5476 ;
	 uint    BindlessSRV_SimpleVolumeEnvTexture ;
	 uint    Padding5484 ;
	 uint    BindlessSampler_SimpleVolumeEnvTextureSampler ;
	 uint    Padding5492 ;
	 uint    BindlessSRV_SSProfilesTexture ;
	 uint    Padding5500 ;
	 uint    BindlessSampler_SSProfilesSampler ;
	 uint    Padding5508 ;
	 uint    BindlessSampler_SSProfilesTransmissionSampler ;
	 uint    Padding5516 ;
	 uint    BindlessSRV_SSProfilesPreIntegratedTexture ;
	 uint    Padding5524 ;
	 uint    BindlessSampler_SSProfilesPreIntegratedSampler ;
	 uint    Padding5532 ;
	 uint    BindlessSRV_SpecularProfileTexture ;
	 uint    Padding5540 ;
	 uint    BindlessSampler_SpecularProfileSampler ;
	 uint    Padding5548 ;
	 uint    BindlessSRV_WaterIndirection ;
	 uint    Padding5556 ;
	 uint    BindlessSRV_WaterData ;
	 uint    Padding5564 ;
	 float4    RectLightAtlasSizeAndInvSize ;
	 float    RectLightAtlasMaxMipLevel ;
	 float    Padding5588 ;
	 uint    BindlessSRV_RectLightAtlasTexture ;
	 uint    Padding5596 ;
	 uint    BindlessSampler_RectLightAtlasSampler ;
	 uint    Padding5604 ;
	 uint    Padding5608 ;
	 uint    Padding5612 ;
	 float4    IESAtlasSizeAndInvSize ;
	 uint    BindlessSRV_IESAtlasTexture ;
	 uint    Padding5636 ;
	 uint    BindlessSampler_IESAtlasSampler ;
	 uint    Padding5644 ;
	 uint    BindlessSampler_LandscapeWeightmapSampler ;
	 uint    Padding5652 ;
	 uint    BindlessSRV_LandscapeIndirection ;
	 uint    Padding5660 ;
	 uint    BindlessSRV_LandscapePerComponentData ;
	 uint    Padding5668 ;
	 uint    BindlessUAV_VTFeedbackBuffer ;
	 uint    Padding5676 ;
	 uint    BindlessSRV_PhysicsFieldClipmapBuffer ;
	 uint    Padding5684 ;
	 uint    Padding5688 ;
	 uint    Padding5692 ;
	 float3    TLASPreViewTranslationHigh ;
	 float    Padding5708 ;
	 float3    TLASPreViewTranslationLow ;
 };
ConstantBuffer<FViewConstants> View;
SamplerState  View_MaterialTextureBilinearWrapedSampler;
struct FPrimitiveConstants {
	 uint    Flags ;
	 uint    InstanceSceneDataOffset ;
	 uint    NumInstanceSceneDataEntries ;
	 int    SingleCaptureIndex ;
	 float3    PositionHigh ;
	 uint    PrimitiveComponentId ;
	 float4x4    LocalToRelativeWorld ;
	 float4x4    RelativeWorldToLocal ;
	 float4x4    PreviousLocalToRelativeWorld ;
	 float4x4    PreviousRelativeWorldToLocal ;
	 float4x4    WorldToPreviousWorld ;
	 float3    InvNonUniformScale ;
	 float    ObjectBoundsX ;
	 float4    ObjectWorldPositionHighAndRadius ;
	 float3    ObjectWorldPositionLow ;
	 float    MinMaterialDisplacement ;
	 float3    ActorWorldPositionHigh ;
	 float    MaxMaterialDisplacement ;
	 float3    ActorWorldPositionLow ;
	 uint    LightmapUVIndex ;
	 float3    ObjectOrientation ;
	 uint    LightmapDataIndex ;
	 float4    NonUniformScale ;
	 float3    PreSkinnedLocalBoundsMin ;
	 uint    NaniteResourceID ;
	 float3    PreSkinnedLocalBoundsMax ;
	 uint    NaniteHierarchyOffset ;
	 float3    LocalObjectBoundsMin ;
	 float    ObjectBoundsY ;
	 float3    LocalObjectBoundsMax ;
	 float    ObjectBoundsZ ;
	 float3    InstanceLocalBoundsCenter ;
	 uint    InstancePayloadDataOffset ;
	 float3    InstanceLocalBoundsExtent ;
	 uint    InstancePayloadDataStride ;
	 uint    InstancePayloadExtensionSize ;
	 uint    Padding564 ;
	 float2    WireframeAndPrimitiveColor ;
	 uint    PackedNaniteFlags ;
	 int    PersistentPrimitiveIndex ;
	 float2    InstanceDrawDistanceMinMaxSquared ;
	 float    InstanceWPODisableDistanceSquared ;
	 uint    NaniteRayTracingDataOffset ;
	 float    MaxWPOExtent ;
	 uint    CustomStencilValueAndMask ;
	 uint    VisibilityFlags ;
	 uint    Padding612 ;
	 uint    Padding616 ;
	 uint    Padding620 ;
	 float4    CustomPrimitiveData[9] ;
 };
ConstantBuffer<FPrimitiveConstants> Primitive;
StructuredBuffer<float4>  Scene_GPUScene_GPUScenePrimitiveSceneData;
struct FMaterialConstants {
	 float4    PreshaderBuffer[23] ;
	 uint    BindlessSRV_Texture2D_0 ;
	 uint    Padding372 ;
	 uint    BindlessSampler_Texture2D_0Sampler ;
	 uint    Padding380 ;
	 uint    BindlessSRV_Texture2D_1 ;
	 uint    Padding388 ;
	 uint    BindlessSampler_Texture2D_1Sampler ;
	 uint    Padding396 ;
	 uint    BindlessSRV_Texture2D_2 ;
	 uint    Padding404 ;
	 uint    BindlessSampler_Texture2D_2Sampler ;
	 uint    Padding412 ;
	 uint    BindlessSRV_Texture2D_3 ;
	 uint    Padding420 ;
	 uint    BindlessSampler_Texture2D_3Sampler ;
	 uint    Padding428 ;
	 uint    BindlessSRV_Texture2D_4 ;
	 uint    Padding436 ;
	 uint    BindlessSampler_Texture2D_4Sampler ;
	 uint    Padding444 ;
	 uint    BindlessSRV_Texture2D_5 ;
	 uint    Padding452 ;
	 uint    BindlessSampler_Texture2D_5Sampler ;
	 uint    Padding460 ;
	 uint    BindlessSRV_Texture2D_6 ;
	 uint    Padding468 ;
	 uint    BindlessSampler_Texture2D_6Sampler ;
	 uint    Padding476 ;
	 uint    BindlessSRV_Texture2D_7 ;
	 uint    Padding484 ;
	 uint    BindlessSampler_Texture2D_7Sampler ;
	 uint    Padding492 ;
	 uint    BindlessSRV_Texture2D_8 ;
	 uint    Padding500 ;
	 uint    BindlessSampler_Texture2D_8Sampler ;
	 uint    Padding508 ;
	 uint    BindlessSRV_Texture2D_9 ;
	 uint    Padding516 ;
	 uint    BindlessSampler_Texture2D_9Sampler ;
	 uint    Padding524 ;
	 uint    BindlessSRV_Texture2D_10 ;
	 uint    Padding532 ;
	 uint    BindlessSampler_Texture2D_10Sampler ;
	 uint    Padding540 ;
	 uint    BindlessSRV_Texture2D_11 ;
	 uint    Padding548 ;
	 uint    BindlessSampler_Texture2D_11Sampler ;
	 uint    Padding556 ;
	 uint    BindlessSRV_Texture2D_12 ;
	 uint    Padding564 ;
	 uint    BindlessSampler_Texture2D_12Sampler ;
	 uint    Padding572 ;
	 uint    BindlessSRV_Texture2D_13 ;
	 uint    Padding580 ;
	 uint    BindlessSampler_Texture2D_13Sampler ;
	 uint    Padding588 ;
	 uint    BindlessSRV_Texture2D_14 ;
	 uint    Padding596 ;
	 uint    BindlessSampler_Texture2D_14Sampler ;
	 uint    Padding604 ;
	 uint    BindlessSRV_Texture2D_15 ;
	 uint    Padding612 ;
	 uint    BindlessSampler_Texture2D_15Sampler ;
	 uint    Padding620 ;
	 uint    BindlessSRV_Texture2D_16 ;
	 uint    Padding628 ;
	 uint    BindlessSampler_Texture2D_16Sampler ;
	 uint    Padding636 ;
	 uint    BindlessSRV_Texture2D_17 ;
	 uint    Padding644 ;
	 uint    BindlessSampler_Texture2D_17Sampler ;
	 uint    Padding652 ;
	 uint    BindlessSRV_Texture2D_18 ;
	 uint    Padding660 ;
	 uint    BindlessSampler_Texture2D_18Sampler ;
	 uint    Padding668 ;
	 uint    BindlessSRV_Texture2D_19 ;
	 uint    Padding676 ;
	 uint    BindlessSampler_Texture2D_19Sampler ;
	 uint    Padding684 ;
	 uint    BindlessSRV_Texture2D_20 ;
	 uint    Padding692 ;
	 uint    BindlessSampler_Texture2D_20Sampler ;
	 uint    Padding700 ;
	 uint    BindlessSRV_Texture2D_21 ;
	 uint    Padding708 ;
	 uint    BindlessSampler_Texture2D_21Sampler ;
	 uint    Padding716 ;
	 uint    BindlessSRV_Texture2D_22 ;
	 uint    Padding724 ;
	 uint    BindlessSampler_Texture2D_22Sampler ;
	 uint    Padding732 ;
	 uint    BindlessSRV_Texture2D_23 ;
	 uint    Padding740 ;
	 uint    BindlessSampler_Texture2D_23Sampler ;
	 uint    Padding748 ;
	 uint    BindlessSRV_Texture2D_24 ;
	 uint    Padding756 ;
	 uint    BindlessSampler_Texture2D_24Sampler ;
	 uint    Padding764 ;
	 uint    BindlessSRV_Texture2D_25 ;
	 uint    Padding772 ;
	 uint    BindlessSampler_Texture2D_25Sampler ;
	 uint    Padding780 ;
	 uint    BindlessSRV_Texture2D_26 ;
	 uint    Padding788 ;
	 uint    BindlessSampler_Texture2D_26Sampler ;
	 uint    Padding796 ;
	 uint    BindlessSRV_Texture2D_27 ;
	 uint    Padding804 ;
	 uint    BindlessSampler_Texture2D_27Sampler ;
	 uint    Padding812 ;
	 uint    BindlessSampler_Wrap_WorldGroupSettings ;
	 uint    Padding820 ;
	 uint    BindlessSampler_Clamp_WorldGroupSettings ;
 };
ConstantBuffer<FMaterialConstants> Material;
Texture2D  Material_Texture2D_0;
SamplerState  Material_Texture2D_0Sampler;
Texture2D  Material_Texture2D_1;
SamplerState  Material_Texture2D_1Sampler;
Texture2D  Material_Texture2D_2;
SamplerState  Material_Texture2D_2Sampler;
Texture2D  Material_Texture2D_3;
SamplerState  Material_Texture2D_3Sampler;
Texture2D  Material_Texture2D_4;
SamplerState  Material_Texture2D_4Sampler;
Texture2D  Material_Texture2D_5;
SamplerState  Material_Texture2D_5Sampler;
Texture2D  Material_Texture2D_6;
SamplerState  Material_Texture2D_6Sampler;
Texture2D  Material_Texture2D_7;
SamplerState  Material_Texture2D_7Sampler;
Texture2D  Material_Texture2D_8;
SamplerState  Material_Texture2D_8Sampler;
Texture2D  Material_Texture2D_9;
SamplerState  Material_Texture2D_9Sampler;
Texture2D  Material_Texture2D_10;
SamplerState  Material_Texture2D_10Sampler;
Texture2D  Material_Texture2D_11;
SamplerState  Material_Texture2D_11Sampler;
Texture2D  Material_Texture2D_12;
SamplerState  Material_Texture2D_12Sampler;
Texture2D  Material_Texture2D_13;
SamplerState  Material_Texture2D_13Sampler;
Texture2D  Material_Texture2D_14;
SamplerState  Material_Texture2D_14Sampler;
Texture2D  Material_Texture2D_15;
SamplerState  Material_Texture2D_15Sampler;
Texture2D  Material_Texture2D_16;
SamplerState  Material_Texture2D_16Sampler;
Texture2D  Material_Texture2D_17;
SamplerState  Material_Texture2D_17Sampler;
Texture2D  Material_Texture2D_18;
SamplerState  Material_Texture2D_18Sampler;
Texture2D  Material_Texture2D_19;
SamplerState  Material_Texture2D_19Sampler;
Texture2D  Material_Texture2D_20;
SamplerState  Material_Texture2D_20Sampler;
Texture2D  Material_Texture2D_21;
SamplerState  Material_Texture2D_21Sampler;
Texture2D  Material_Texture2D_22;
SamplerState  Material_Texture2D_22Sampler;
Texture2D  Material_Texture2D_23;
SamplerState  Material_Texture2D_23Sampler;
Texture2D  Material_Texture2D_24;
SamplerState  Material_Texture2D_24Sampler;
Texture2D  Material_Texture2D_25;
SamplerState  Material_Texture2D_25Sampler;
struct ViewStateTileOffsetData
{
	FLWCVector3 WorldCameraOrigin;
	FLWCVector3 WorldViewOrigin;
	FLWCVector3 PrevWorldCameraOrigin;
	FLWCVector3 PrevWorldViewOrigin;
	FLWCVector3 PreViewTranslation;
	FLWCVector3 PrevPreViewTranslation;
};
struct ViewState
{
	float4x4 TranslatedWorldToClip;
	float4x4 RelativeWorldToClip;
	float4x4 ClipToRelativeWorld;
	float4x4 TranslatedWorldToView;
	float4x4 ViewToTranslatedWorld;
	float4x4 TranslatedWorldToCameraView;
	float4x4 CameraViewToTranslatedWorld;
	float4x4 ViewToClip;
	float4x4 ViewToClipNoAA;
	float4x4 ClipToView;
	float4x4 ClipToTranslatedWorld;
	float4x4 SVPositionToTranslatedWorld;
	float4x4 ScreenToRelativeWorld;
	float4x4 ScreenToTranslatedWorld;
	float4x4 MobileMultiviewShadowTransform;
	float3 ViewOriginHigh;
	float3 ViewForward;
	float3 ViewUp;
	float3 ViewRight;
	float3 HMDViewNoRollUp;
	float3 HMDViewNoRollRight;
	float4 InvDeviceZToWorldZTransform;
	float4 ScreenPositionScaleBias;
	float3 ViewOriginLow;
	float3 TranslatedWorldCameraOrigin;
	float3 WorldViewOriginHigh;
	float3 WorldViewOriginLow;
	float3 PreViewTranslationHigh;
	float3 PreViewTranslationLow;
	float4x4 PrevViewToClip;
	float4x4 PrevClipToView;
	float4x4 PrevTranslatedWorldToClip;
	float4x4 PrevTranslatedWorldToView;
	float4x4 PrevViewToTranslatedWorld;
	float4x4 PrevTranslatedWorldToCameraView;
	float4x4 PrevCameraViewToTranslatedWorld;
	float3 PrevTranslatedWorldCameraOrigin;
	float3 PrevWorldCameraOriginHigh;
	float3 PrevWorldCameraOriginLow;
	float3 PrevWorldViewOriginHigh;
	float3 PrevWorldViewOriginLow;
	float3 PrevPreViewTranslationHigh;
	float3 PrevPreViewTranslationLow;
	float3 ViewTilePosition;
	float3 RelativeWorldCameraOriginTO;
	float3 RelativeWorldViewOriginTO;
	float3 RelativePreViewTranslationTO;
	float3 PrevRelativeWorldCameraOriginTO;
	float3 PrevRelativeWorldViewOriginTO;
	float3 RelativePrevPreViewTranslationTO;
	float4x4 PrevClipToRelativeWorld;
	float4x4 PrevScreenToTranslatedWorld;
	float4x4 ClipToPrevClip;
	float4x4 ClipToPrevClipWithAA;
	float4 TemporalAAJitter;
	float4 GlobalClippingPlane;
	float2 FieldOfViewWideAngles;
	float2 PrevFieldOfViewWideAngles;
	float4 ViewRectMin;
	float4 ViewSizeAndInvSize;
	uint4 ViewRectMinAndSize;
	float4 LightProbeSizeRatioAndInvSizeRatio;
	float4 BufferSizeAndInvSize;
	float4 BufferBilinearUVMinMax;
	float4 ScreenToViewSpace;
	float2 BufferToSceneTextureScale;
	float2 ResolutionFractionAndInv;
	int NumSceneColorMSAASamples;
	float ProjectionDepthThicknessScale;
	float PreExposure;
	float OneOverPreExposure;
	float4 DiffuseOverrideParameter;
	float4 SpecularOverrideParameter;
	float4 NormalOverrideParameter;
	float2 RoughnessOverrideParameter;
	float PrevFrameGameTime;
	float PrevFrameRealTime;
	float OutOfBoundsMask;
	float3 WorldCameraMovementSinceLastFrame;
	float CullingSign;
	float NearPlane;
	float GameTime;
	float RealTime;
	float DeltaTime;
	float MaterialTextureMipBias;
	float MaterialTextureDerivativeMultiply;
	uint Random;
	uint FrameNumber;
	uint FrameCounter;
	uint StateFrameIndexMod8;
	uint StateFrameIndex;
	uint DebugViewModeMask;
	uint WorldIsPaused;
	float CameraCut;
	float UnlitViewmodeMask;
	float4 DirectionalLightColor;
	float3 DirectionalLightDirection;
	float4 TranslucencyLightingVolumeMin[2];
	float4 TranslucencyLightingVolumeInvSize[2];
	float4 TemporalAAParams;
	float4 CircleDOFParams;
	float DepthOfFieldSensorWidth;
	float DepthOfFieldFocalDistance;
	float DepthOfFieldScale;
	float DepthOfFieldFocalLength;
	float DepthOfFieldFocalRegion;
	float DepthOfFieldNearTransitionRegion;
	float DepthOfFieldFarTransitionRegion;
	float MotionBlurNormalizedToPixel;
	float GeneralPurposeTweak;
	float GeneralPurposeTweak2;
	float DemosaicVposOffset;
	float DecalDepthBias;
	float3 IndirectLightingColorScale;
	float3 PrecomputedIndirectLightingColorScale;
	float3 PrecomputedIndirectSpecularColorScale;
	float4 AtmosphereLightDirection[2];
	float4 AtmosphereLightIlluminanceOnGroundPostTransmittance[2];
	float4 AtmosphereLightIlluminanceOuterSpace[2];
	float4 AtmosphereLightDiscLuminance[2];
	float4 AtmosphereLightDiscCosHalfApexAngle_PPTrans[2];
	float4 SkyViewLutSizeAndInvSize;
	float3 SkyCameraTranslatedWorldOrigin;
	float4 SkyPlanetTranslatedWorldCenterAndViewHeight;
	float4x4 SkyViewLutReferential;
	float4 SkyAtmosphereSkyLuminanceFactor;
	float SkyAtmospherePresentInScene;
	float SkyAtmosphereHeightFogContribution;
	float SkyAtmosphereBottomRadiusKm;
	float SkyAtmosphereTopRadiusKm;
	float4 SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;
	float SkyAtmosphereAerialPerspectiveStartDepthKm;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;
	float SkyAtmosphereApplyCameraAerialPerspectiveVolume;
	float3 NormalCurvatureToRoughnessScaleBias;
	float RenderingReflectionCaptureMask;
	float RealTimeReflectionCapture;
	float RealTimeReflectionCapturePreExposure;
	float4 AmbientCubemapTint;
	float AmbientCubemapIntensity;
	float SkyLightApplyPrecomputedBentNormalShadowingFlag;
	float SkyLightAffectReflectionFlag;
	float SkyLightAffectGlobalIlluminationFlag;
	float4 SkyLightColor;
	float SkyLightVolumetricScatteringIntensity;
	float4 MobileSkyIrradianceEnvironmentMap[8];
	float MobilePreviewMode;
	float HMDEyePaddingOffset;
	float ReflectionCubemapMaxMip;
	float ShowDecalsMask;
	uint DistanceFieldAOSpecularOcclusionMode;
	float IndirectCapsuleSelfShadowingIntensity;
	float3 ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;
	int StereoPassIndex;
	float4 GlobalVolumeTranslatedCenterAndExtent[6];
	float4 GlobalVolumeTranslatedWorldToUVAddAndMul[6];
	float4 GlobalDistanceFieldMipTranslatedWorldToUVScale[6];
	float4 GlobalDistanceFieldMipTranslatedWorldToUVBias[6];
	float GlobalDistanceFieldMipFactor;
	float GlobalDistanceFieldMipTransition;
	int GlobalDistanceFieldClipmapSizeInPages;
	float3 GlobalDistanceFieldInvPageAtlasSize;
	float3 GlobalDistanceFieldInvCoverageAtlasSize;
	float GlobalVolumeDimension;
	float GlobalVolumeTexelSize;
	float MaxGlobalDFAOConeDistance;
	uint NumGlobalSDFClipmaps;
	float CoveredExpandSurfaceScale;
	float NotCoveredExpandSurfaceScale;
	float NotCoveredMinStepScale;
	float DitheredTransparencyStepThreshold;
	float DitheredTransparencyTraceThreshold;
	int2 CursorPosition;
	float bCheckerboardSubsurfaceProfileRendering;
	float3 VolumetricFogInvGridSize;
	float3 VolumetricFogGridZParams;
	float2 VolumetricFogSVPosToVolumeUV;
	float2 VolumetricFogViewGridUVToPrevViewRectUV;
	float2 VolumetricFogPrevViewGridRectUVToResourceUV;
	float2 VolumetricFogPrevUVMax;
	float2 VolumetricFogPrevUVMaxForTemporalBlend;
	float2 VolumetricFogScreenToResourceUV;
	float2 VolumetricFogUVMax;
	float VolumetricFogMaxDistance;
	float3 VolumetricLightmapWorldToUVScale;
	float3 VolumetricLightmapWorldToUVAdd;
	float3 VolumetricLightmapIndirectionTextureSize;
	float VolumetricLightmapBrickSize;
	float3 VolumetricLightmapBrickTexelSize;
	float IndirectLightingCacheShowFlag;
	float EyeToPixelSpreadAngle;
	float4 XRPassthroughCameraUVs[2];
	float GlobalVirtualTextureMipBias;
	uint VirtualTextureFeedbackShift;
	uint VirtualTextureFeedbackMask;
	uint VirtualTextureFeedbackStride;
	uint VirtualTextureFeedbackJitterOffset;
	uint VirtualTextureFeedbackSampleOffset;
	float4 RuntimeVirtualTextureMipLevel;
	float2 RuntimeVirtualTexturePackHeight;
	float4 RuntimeVirtualTextureDebugParams;
	int FarShadowStaticMeshLODBias;
	float MinRoughness;
	float4 HairRenderInfo;
	uint EnableSkyLight;
	uint HairRenderInfoBits;
	uint HairComponents;
	float bSubsurfacePostprocessEnabled;
	float4 SSProfilesTextureSizeAndInvSize;
	float4 SSProfilesPreIntegratedTextureSizeAndInvSize;
	float4 SpecularProfileTextureSizeAndInvSize;
	float3 PhysicsFieldClipmapCenter;
	float PhysicsFieldClipmapDistance;
	int PhysicsFieldClipmapResolution;
	int PhysicsFieldClipmapExponent;
	int PhysicsFieldClipmapCount;
	int PhysicsFieldTargetCount;
	int4 PhysicsFieldTargets[32];
	uint GPUSceneViewId;
	float ViewResolutionFraction;
	float SubSurfaceColorAsTransmittanceAtDistanceInMeters;
	float4 TanAndInvTanHalfFOV;
	float4 PrevTanAndInvTanHalfFOV;
	float2 WorldDepthToPixelWorldRadius;
	float4 ScreenRayLengthMultiplier;
	float4 GlintLUTParameters0;
	float4 GlintLUTParameters1;
	int4 EnvironmentComponentsFlags;
	FDFInverseMatrix WorldToClip;
	FDFMatrix ClipToWorld;
	FDFMatrix ScreenToWorld;
	FDFMatrix PrevClipToWorld;
	FDFVector3 WorldCameraOrigin;
	FDFVector3 WorldViewOrigin;
	FDFVector3 PrevWorldCameraOrigin;
	FDFVector3 PrevWorldViewOrigin;
	FDFVector3 PreViewTranslation;
	FDFVector3 PrevPreViewTranslation;
	ViewStateTileOffsetData TileOffset;
};
void FinalizeViewState(inout ViewState InOutView);
ViewState GetPrimaryView()
{
	ViewState Result;
	Result.TranslatedWorldToClip = View.TranslatedWorldToClip;
	Result.RelativeWorldToClip = View.RelativeWorldToClip;
	Result.ClipToRelativeWorld = View.ClipToRelativeWorld;
	Result.TranslatedWorldToView = View.TranslatedWorldToView;
	Result.ViewToTranslatedWorld = View.ViewToTranslatedWorld;
	Result.TranslatedWorldToCameraView = View.TranslatedWorldToCameraView;
	Result.CameraViewToTranslatedWorld = View.CameraViewToTranslatedWorld;
	Result.ViewToClip = View.ViewToClip;
	Result.ViewToClipNoAA = View.ViewToClipNoAA;
	Result.ClipToView = View.ClipToView;
	Result.ClipToTranslatedWorld = View.ClipToTranslatedWorld;
	Result.SVPositionToTranslatedWorld = View.SVPositionToTranslatedWorld;
	Result.ScreenToRelativeWorld = View.ScreenToRelativeWorld;
	Result.ScreenToTranslatedWorld = View.ScreenToTranslatedWorld;
	Result.MobileMultiviewShadowTransform = View.MobileMultiviewShadowTransform;
	Result.ViewOriginHigh = View.ViewOriginHigh;
	Result.ViewForward = View.ViewForward;
	Result.ViewUp = View.ViewUp;
	Result.ViewRight = View.ViewRight;
	Result.HMDViewNoRollUp = View.HMDViewNoRollUp;
	Result.HMDViewNoRollRight = View.HMDViewNoRollRight;
	Result.InvDeviceZToWorldZTransform = View.InvDeviceZToWorldZTransform;
	Result.ScreenPositionScaleBias = View.ScreenPositionScaleBias;
	Result.ViewOriginLow = View.ViewOriginLow;
	Result.TranslatedWorldCameraOrigin = View.TranslatedWorldCameraOrigin;
	Result.WorldViewOriginHigh = View.WorldViewOriginHigh;
	Result.WorldViewOriginLow = View.WorldViewOriginLow;
	Result.PreViewTranslationHigh = View.PreViewTranslationHigh;
	Result.PreViewTranslationLow = View.PreViewTranslationLow;
	Result.PrevViewToClip = View.PrevViewToClip;
	Result.PrevClipToView = View.PrevClipToView;
	Result.PrevTranslatedWorldToClip = View.PrevTranslatedWorldToClip;
	Result.PrevTranslatedWorldToView = View.PrevTranslatedWorldToView;
	Result.PrevViewToTranslatedWorld = View.PrevViewToTranslatedWorld;
	Result.PrevTranslatedWorldToCameraView = View.PrevTranslatedWorldToCameraView;
	Result.PrevCameraViewToTranslatedWorld = View.PrevCameraViewToTranslatedWorld;
	Result.PrevTranslatedWorldCameraOrigin = View.PrevTranslatedWorldCameraOrigin;
	Result.PrevWorldCameraOriginHigh = View.PrevWorldCameraOriginHigh;
	Result.PrevWorldCameraOriginLow = View.PrevWorldCameraOriginLow;
	Result.PrevWorldViewOriginHigh = View.PrevWorldViewOriginHigh;
	Result.PrevWorldViewOriginLow = View.PrevWorldViewOriginLow;
	Result.PrevPreViewTranslationHigh = View.PrevPreViewTranslationHigh;
	Result.PrevPreViewTranslationLow = View.PrevPreViewTranslationLow;
	Result.ViewTilePosition = View.ViewTilePosition;
	Result.RelativeWorldCameraOriginTO = View.RelativeWorldCameraOriginTO;
	Result.RelativeWorldViewOriginTO = View.RelativeWorldViewOriginTO;
	Result.RelativePreViewTranslationTO = View.RelativePreViewTranslationTO;
	Result.PrevRelativeWorldCameraOriginTO = View.PrevRelativeWorldCameraOriginTO;
	Result.PrevRelativeWorldViewOriginTO = View.PrevRelativeWorldViewOriginTO;
	Result.RelativePrevPreViewTranslationTO = View.RelativePrevPreViewTranslationTO;
	Result.PrevClipToRelativeWorld = View.PrevClipToRelativeWorld;
	Result.PrevScreenToTranslatedWorld = View.PrevScreenToTranslatedWorld;
	Result.ClipToPrevClip = View.ClipToPrevClip;
	Result.ClipToPrevClipWithAA = View.ClipToPrevClipWithAA;
	Result.TemporalAAJitter = View.TemporalAAJitter;
	Result.GlobalClippingPlane = View.GlobalClippingPlane;
	Result.FieldOfViewWideAngles = View.FieldOfViewWideAngles;
	Result.PrevFieldOfViewWideAngles = View.PrevFieldOfViewWideAngles;
	Result.ViewRectMin = View.ViewRectMin;
	Result.ViewSizeAndInvSize = View.ViewSizeAndInvSize;
	Result.ViewRectMinAndSize = View.ViewRectMinAndSize;
	Result.LightProbeSizeRatioAndInvSizeRatio = View.LightProbeSizeRatioAndInvSizeRatio;
	Result.BufferSizeAndInvSize = View.BufferSizeAndInvSize;
	Result.BufferBilinearUVMinMax = View.BufferBilinearUVMinMax;
	Result.ScreenToViewSpace = View.ScreenToViewSpace;
	Result.BufferToSceneTextureScale = View.BufferToSceneTextureScale;
	Result.ResolutionFractionAndInv = View.ResolutionFractionAndInv;
	Result.NumSceneColorMSAASamples = View.NumSceneColorMSAASamples;
	Result.ProjectionDepthThicknessScale = View.ProjectionDepthThicknessScale;
	Result.PreExposure = View.PreExposure;
	Result.OneOverPreExposure = View.OneOverPreExposure;
	Result.DiffuseOverrideParameter = View.DiffuseOverrideParameter;
	Result.SpecularOverrideParameter = View.SpecularOverrideParameter;
	Result.NormalOverrideParameter = View.NormalOverrideParameter;
	Result.RoughnessOverrideParameter = View.RoughnessOverrideParameter;
	Result.PrevFrameGameTime = View.PrevFrameGameTime;
	Result.PrevFrameRealTime = View.PrevFrameRealTime;
	Result.OutOfBoundsMask = View.OutOfBoundsMask;
	Result.WorldCameraMovementSinceLastFrame = View.WorldCameraMovementSinceLastFrame;
	Result.CullingSign = View.CullingSign;
	Result.NearPlane = View.NearPlane;
	Result.GameTime = View.GameTime;
	Result.RealTime = View.RealTime;
	Result.DeltaTime = View.DeltaTime;
	Result.MaterialTextureMipBias = View.MaterialTextureMipBias;
	Result.MaterialTextureDerivativeMultiply = View.MaterialTextureDerivativeMultiply;
	Result.Random = View.Random;
	Result.FrameNumber = View.FrameNumber;
	Result.FrameCounter = View.FrameCounter;
	Result.StateFrameIndexMod8 = View.StateFrameIndexMod8;
	Result.StateFrameIndex = View.StateFrameIndex;
	Result.DebugViewModeMask = View.DebugViewModeMask;
	Result.WorldIsPaused = View.WorldIsPaused;
	Result.CameraCut = View.CameraCut;
	Result.UnlitViewmodeMask = View.UnlitViewmodeMask;
	Result.DirectionalLightColor = View.DirectionalLightColor;
	Result.DirectionalLightDirection = View.DirectionalLightDirection;
	Result.TranslucencyLightingVolumeMin = View.TranslucencyLightingVolumeMin;
	Result.TranslucencyLightingVolumeInvSize = View.TranslucencyLightingVolumeInvSize;
	Result.TemporalAAParams = View.TemporalAAParams;
	Result.CircleDOFParams = View.CircleDOFParams;
	Result.DepthOfFieldSensorWidth = View.DepthOfFieldSensorWidth;
	Result.DepthOfFieldFocalDistance = View.DepthOfFieldFocalDistance;
	Result.DepthOfFieldScale = View.DepthOfFieldScale;
	Result.DepthOfFieldFocalLength = View.DepthOfFieldFocalLength;
	Result.DepthOfFieldFocalRegion = View.DepthOfFieldFocalRegion;
	Result.DepthOfFieldNearTransitionRegion = View.DepthOfFieldNearTransitionRegion;
	Result.DepthOfFieldFarTransitionRegion = View.DepthOfFieldFarTransitionRegion;
	Result.MotionBlurNormalizedToPixel = View.MotionBlurNormalizedToPixel;
	Result.GeneralPurposeTweak = View.GeneralPurposeTweak;
	Result.GeneralPurposeTweak2 = View.GeneralPurposeTweak2;
	Result.DemosaicVposOffset = View.DemosaicVposOffset;
	Result.DecalDepthBias = View.DecalDepthBias;
	Result.IndirectLightingColorScale = View.IndirectLightingColorScale;
	Result.PrecomputedIndirectLightingColorScale = View.PrecomputedIndirectLightingColorScale;
	Result.PrecomputedIndirectSpecularColorScale = View.PrecomputedIndirectSpecularColorScale;
	Result.AtmosphereLightDirection = View.AtmosphereLightDirection;
	Result.AtmosphereLightIlluminanceOnGroundPostTransmittance = View.AtmosphereLightIlluminanceOnGroundPostTransmittance;
	Result.AtmosphereLightIlluminanceOuterSpace = View.AtmosphereLightIlluminanceOuterSpace;
	Result.AtmosphereLightDiscLuminance = View.AtmosphereLightDiscLuminance;
	Result.AtmosphereLightDiscCosHalfApexAngle_PPTrans = View.AtmosphereLightDiscCosHalfApexAngle_PPTrans;
	Result.SkyViewLutSizeAndInvSize = View.SkyViewLutSizeAndInvSize;
	Result.SkyCameraTranslatedWorldOrigin = View.SkyCameraTranslatedWorldOrigin;
	Result.SkyPlanetTranslatedWorldCenterAndViewHeight = View.SkyPlanetTranslatedWorldCenterAndViewHeight;
	Result.SkyViewLutReferential = View.SkyViewLutReferential;
	Result.SkyAtmosphereSkyLuminanceFactor = View.SkyAtmosphereSkyLuminanceFactor;
	Result.SkyAtmospherePresentInScene = View.SkyAtmospherePresentInScene;
	Result.SkyAtmosphereHeightFogContribution = View.SkyAtmosphereHeightFogContribution;
	Result.SkyAtmosphereBottomRadiusKm = View.SkyAtmosphereBottomRadiusKm;
	Result.SkyAtmosphereTopRadiusKm = View.SkyAtmosphereTopRadiusKm;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize = View.SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;
	Result.SkyAtmosphereAerialPerspectiveStartDepthKm = View.SkyAtmosphereAerialPerspectiveStartDepthKm;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution = View.SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv = View.SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm = View.SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv = View.SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;
	Result.SkyAtmosphereApplyCameraAerialPerspectiveVolume = View.SkyAtmosphereApplyCameraAerialPerspectiveVolume;
	Result.NormalCurvatureToRoughnessScaleBias = View.NormalCurvatureToRoughnessScaleBias;
	Result.RenderingReflectionCaptureMask = View.RenderingReflectionCaptureMask;
	Result.RealTimeReflectionCapture = View.RealTimeReflectionCapture;
	Result.RealTimeReflectionCapturePreExposure = View.RealTimeReflectionCapturePreExposure;
	Result.AmbientCubemapTint = View.AmbientCubemapTint;
	Result.AmbientCubemapIntensity = View.AmbientCubemapIntensity;
	Result.SkyLightApplyPrecomputedBentNormalShadowingFlag = View.SkyLightApplyPrecomputedBentNormalShadowingFlag;
	Result.SkyLightAffectReflectionFlag = View.SkyLightAffectReflectionFlag;
	Result.SkyLightAffectGlobalIlluminationFlag = View.SkyLightAffectGlobalIlluminationFlag;
	Result.SkyLightColor = View.SkyLightColor;
	Result.SkyLightVolumetricScatteringIntensity = View.SkyLightVolumetricScatteringIntensity;
	Result.MobileSkyIrradianceEnvironmentMap = View.MobileSkyIrradianceEnvironmentMap;
	Result.MobilePreviewMode = View.MobilePreviewMode;
	Result.HMDEyePaddingOffset = View.HMDEyePaddingOffset;
	Result.ReflectionCubemapMaxMip = View.ReflectionCubemapMaxMip;
	Result.ShowDecalsMask = View.ShowDecalsMask;
	Result.DistanceFieldAOSpecularOcclusionMode = View.DistanceFieldAOSpecularOcclusionMode;
	Result.IndirectCapsuleSelfShadowingIntensity = View.IndirectCapsuleSelfShadowingIntensity;
	Result.ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight = View.ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;
	Result.StereoPassIndex = View.StereoPassIndex;
	Result.GlobalVolumeTranslatedCenterAndExtent = View.GlobalVolumeTranslatedCenterAndExtent;
	Result.GlobalVolumeTranslatedWorldToUVAddAndMul = View.GlobalVolumeTranslatedWorldToUVAddAndMul;
	Result.GlobalDistanceFieldMipTranslatedWorldToUVScale = View.GlobalDistanceFieldMipTranslatedWorldToUVScale;
	Result.GlobalDistanceFieldMipTranslatedWorldToUVBias = View.GlobalDistanceFieldMipTranslatedWorldToUVBias;
	Result.GlobalDistanceFieldMipFactor = View.GlobalDistanceFieldMipFactor;
	Result.GlobalDistanceFieldMipTransition = View.GlobalDistanceFieldMipTransition;
	Result.GlobalDistanceFieldClipmapSizeInPages = View.GlobalDistanceFieldClipmapSizeInPages;
	Result.GlobalDistanceFieldInvPageAtlasSize = View.GlobalDistanceFieldInvPageAtlasSize;
	Result.GlobalDistanceFieldInvCoverageAtlasSize = View.GlobalDistanceFieldInvCoverageAtlasSize;
	Result.GlobalVolumeDimension = View.GlobalVolumeDimension;
	Result.GlobalVolumeTexelSize = View.GlobalVolumeTexelSize;
	Result.MaxGlobalDFAOConeDistance = View.MaxGlobalDFAOConeDistance;
	Result.NumGlobalSDFClipmaps = View.NumGlobalSDFClipmaps;
	Result.CoveredExpandSurfaceScale = View.CoveredExpandSurfaceScale;
	Result.NotCoveredExpandSurfaceScale = View.NotCoveredExpandSurfaceScale;
	Result.NotCoveredMinStepScale = View.NotCoveredMinStepScale;
	Result.DitheredTransparencyStepThreshold = View.DitheredTransparencyStepThreshold;
	Result.DitheredTransparencyTraceThreshold = View.DitheredTransparencyTraceThreshold;
	Result.CursorPosition = View.CursorPosition;
	Result.bCheckerboardSubsurfaceProfileRendering = View.bCheckerboardSubsurfaceProfileRendering;
	Result.VolumetricFogInvGridSize = View.VolumetricFogInvGridSize;
	Result.VolumetricFogGridZParams = View.VolumetricFogGridZParams;
	Result.VolumetricFogSVPosToVolumeUV = View.VolumetricFogSVPosToVolumeUV;
	Result.VolumetricFogViewGridUVToPrevViewRectUV = View.VolumetricFogViewGridUVToPrevViewRectUV;
	Result.VolumetricFogPrevViewGridRectUVToResourceUV = View.VolumetricFogPrevViewGridRectUVToResourceUV;
	Result.VolumetricFogPrevUVMax = View.VolumetricFogPrevUVMax;
	Result.VolumetricFogPrevUVMaxForTemporalBlend = View.VolumetricFogPrevUVMaxForTemporalBlend;
	Result.VolumetricFogScreenToResourceUV = View.VolumetricFogScreenToResourceUV;
	Result.VolumetricFogUVMax = View.VolumetricFogUVMax;
	Result.VolumetricFogMaxDistance = View.VolumetricFogMaxDistance;
	Result.VolumetricLightmapWorldToUVScale = View.VolumetricLightmapWorldToUVScale;
	Result.VolumetricLightmapWorldToUVAdd = View.VolumetricLightmapWorldToUVAdd;
	Result.VolumetricLightmapIndirectionTextureSize = View.VolumetricLightmapIndirectionTextureSize;
	Result.VolumetricLightmapBrickSize = View.VolumetricLightmapBrickSize;
	Result.VolumetricLightmapBrickTexelSize = View.VolumetricLightmapBrickTexelSize;
	Result.IndirectLightingCacheShowFlag = View.IndirectLightingCacheShowFlag;
	Result.EyeToPixelSpreadAngle = View.EyeToPixelSpreadAngle;
	Result.XRPassthroughCameraUVs = View.XRPassthroughCameraUVs;
	Result.GlobalVirtualTextureMipBias = View.GlobalVirtualTextureMipBias;
	Result.VirtualTextureFeedbackShift = View.VirtualTextureFeedbackShift;
	Result.VirtualTextureFeedbackMask = View.VirtualTextureFeedbackMask;
	Result.VirtualTextureFeedbackStride = View.VirtualTextureFeedbackStride;
	Result.VirtualTextureFeedbackJitterOffset = View.VirtualTextureFeedbackJitterOffset;
	Result.VirtualTextureFeedbackSampleOffset = View.VirtualTextureFeedbackSampleOffset;
	Result.RuntimeVirtualTextureMipLevel = View.RuntimeVirtualTextureMipLevel;
	Result.RuntimeVirtualTexturePackHeight = View.RuntimeVirtualTexturePackHeight;
	Result.RuntimeVirtualTextureDebugParams = View.RuntimeVirtualTextureDebugParams;
	Result.FarShadowStaticMeshLODBias = View.FarShadowStaticMeshLODBias;
	Result.MinRoughness = View.MinRoughness;
	Result.HairRenderInfo = View.HairRenderInfo;
	Result.EnableSkyLight = View.EnableSkyLight;
	Result.HairRenderInfoBits = View.HairRenderInfoBits;
	Result.HairComponents = View.HairComponents;
	Result.bSubsurfacePostprocessEnabled = View.bSubsurfacePostprocessEnabled;
	Result.SSProfilesTextureSizeAndInvSize = View.SSProfilesTextureSizeAndInvSize;
	Result.SSProfilesPreIntegratedTextureSizeAndInvSize = View.SSProfilesPreIntegratedTextureSizeAndInvSize;
	Result.SpecularProfileTextureSizeAndInvSize = View.SpecularProfileTextureSizeAndInvSize;
	Result.PhysicsFieldClipmapCenter = View.PhysicsFieldClipmapCenter;
	Result.PhysicsFieldClipmapDistance = View.PhysicsFieldClipmapDistance;
	Result.PhysicsFieldClipmapResolution = View.PhysicsFieldClipmapResolution;
	Result.PhysicsFieldClipmapExponent = View.PhysicsFieldClipmapExponent;
	Result.PhysicsFieldClipmapCount = View.PhysicsFieldClipmapCount;
	Result.PhysicsFieldTargetCount = View.PhysicsFieldTargetCount;
	Result.PhysicsFieldTargets = View.PhysicsFieldTargets;
	Result.GPUSceneViewId = View.GPUSceneViewId;
	Result.ViewResolutionFraction = View.ViewResolutionFraction;
	Result.SubSurfaceColorAsTransmittanceAtDistanceInMeters = View.SubSurfaceColorAsTransmittanceAtDistanceInMeters;
	Result.TanAndInvTanHalfFOV = View.TanAndInvTanHalfFOV;
	Result.PrevTanAndInvTanHalfFOV = View.PrevTanAndInvTanHalfFOV;
	Result.WorldDepthToPixelWorldRadius = View.WorldDepthToPixelWorldRadius;
	Result.ScreenRayLengthMultiplier = View.ScreenRayLengthMultiplier;
	Result.GlintLUTParameters0 = View.GlintLUTParameters0;
	Result.GlintLUTParameters1 = View.GlintLUTParameters1;
	Result.EnvironmentComponentsFlags = View.EnvironmentComponentsFlags;
	FinalizeViewState(Result);
	return Result;
}
void FinalizeViewState(inout ViewState InOutView)
{
	InOutView.WorldToClip = MakeDFInverseMatrix(InOutView.ViewOriginHigh, InOutView.RelativeWorldToClip);
	InOutView.ClipToWorld = MakeDFMatrix(InOutView.ViewOriginHigh, InOutView.ClipToRelativeWorld);
	InOutView.ScreenToWorld = MakeDFMatrix(InOutView.ViewOriginHigh, InOutView.ScreenToRelativeWorld);
	InOutView.PrevClipToWorld = MakeDFMatrix(InOutView.ViewOriginHigh, InOutView.PrevClipToRelativeWorld);
	InOutView.WorldCameraOrigin = MakeDFVector3(InOutView.ViewOriginHigh, InOutView.ViewOriginLow);
	InOutView.WorldViewOrigin = MakeDFVector3(InOutView.WorldViewOriginHigh, InOutView.WorldViewOriginLow);
	InOutView.PrevWorldCameraOrigin = MakeDFVector3(InOutView.PrevWorldCameraOriginHigh, InOutView.PrevWorldCameraOriginLow);
	InOutView.PrevWorldViewOrigin = MakeDFVector3(InOutView.PrevWorldViewOriginHigh, InOutView.PrevWorldViewOriginLow);
	InOutView.PreViewTranslation = MakeDFVector3(InOutView.PreViewTranslationHigh, InOutView.PreViewTranslationLow);
	InOutView.PrevPreViewTranslation = MakeDFVector3(InOutView.PrevPreViewTranslationHigh, InOutView.PrevPreViewTranslationLow);
	InOutView.TileOffset.WorldCameraOrigin = MakeLWCVector3(InOutView.ViewTilePosition, InOutView.RelativeWorldCameraOriginTO);
	InOutView.TileOffset.WorldViewOrigin = MakeLWCVector3(InOutView.ViewTilePosition, InOutView.RelativeWorldViewOriginTO);
	InOutView.TileOffset.PrevWorldCameraOrigin = MakeLWCVector3(InOutView.ViewTilePosition, InOutView.PrevRelativeWorldCameraOriginTO);
	InOutView.TileOffset.PrevWorldViewOrigin = MakeLWCVector3(InOutView.ViewTilePosition, InOutView.PrevRelativeWorldViewOriginTO);
	InOutView.TileOffset.PreViewTranslation = MakeLWCVector3(-InOutView.ViewTilePosition, InOutView.RelativePreViewTranslationTO);
	InOutView.TileOffset.PrevPreViewTranslation = MakeLWCVector3(-InOutView.ViewTilePosition, InOutView.RelativePrevPreViewTranslationTO);
}
static ViewState ResolvedView = (ViewState)0.0f;
ViewState ResolveView()
{
	return GetPrimaryView();
}
float4 Texture2DSample(Texture2D Tex, SamplerState Sampler, float2 UV)
{
	return Tex.Sample(Sampler, UV);
}
float4 Texture2DSample(Texture2D Tex, SamplerState Sampler, FloatDeriv2 UV)
{
	return Tex.SampleGrad(Sampler, UV.Value, UV.Ddx, UV.Ddy);
}
float4 Texture2DSampleBias(Texture2D Tex, SamplerState Sampler, float2 UV, float MipBias)
{
	return Tex.SampleBias(Sampler, UV, MipBias);
}
float PositiveClampedPow(float Base, float Exponent)
{
	return (Base <= 2.980233e-8f) ? 0.0f : pow(Base, Exponent);
}
float2 PositiveClampedPow(float2 Base, float2 Exponent)
{
	return float2(PositiveClampedPow(Base.x, Exponent.x), PositiveClampedPow(Base.y, Exponent.y)); 
}
float3 PositiveClampedPow(float3 Base, float3 Exponent)
{
	return float3(PositiveClampedPow(Base.xy, Exponent.xy), PositiveClampedPow(Base.z, Exponent.z)); 
}
float4 PositiveClampedPow(float4 Base, float4 Exponent)
{
	return float4(PositiveClampedPow(Base.xy, Exponent.xy), PositiveClampedPow(Base.zw, Exponent.zw)); 
}
float Pow2( float x )
{
	return x*x;
}
float2 Pow2( float2 x )
{
	return x*x;
}
float3 Pow2( float3 x )
{
	return x*x;
}
float4 Pow2( float4 x )
{
	return x*x;
}
float ConvertFromDeviceZ(float DeviceZ)
{
	return DeviceZ * View.InvDeviceZToWorldZTransform[0] + View.InvDeviceZToWorldZTransform[1] + 1.0f / (DeviceZ * View.InvDeviceZToWorldZTransform[2] - View.InvDeviceZToWorldZTransform[3]);
}
bool IsOrthoProjection(float4x4 ViewToClip)
{
	return ViewToClip._44 >= 1.0f;
}
bool IsOrthoProjection(ViewState InView)
{
	return IsOrthoProjection(InView.ViewToClip);
}
bool IsOrthoProjection()
{
	return IsOrthoProjection(View.ViewToClip);
}
float2 ScreenPositionToBufferUV(float4 ScreenPosition)
{
	return float2(ScreenPosition.xy / ScreenPosition.w * ResolvedView.ScreenPositionScaleBias.xy + ResolvedView.ScreenPositionScaleBias.wz);
}
float3 SvPositionToResolvedTranslatedWorld(float4 SvPosition)
{
	float4 HomWorldPos = mul(float4(SvPosition.xyz, 1), ResolvedView.SVPositionToTranslatedWorld);
	return HomWorldPos.xyz / HomWorldPos.w;
}
float4 SvPositionToResolvedScreenPosition(float4 SvPosition)
{
	float2 PixelPos = SvPosition.xy - ResolvedView.ViewRectMin.xy;	
	float3 NDCPos = float3( (PixelPos * ResolvedView.ViewSizeAndInvSize.zw - 0.5f) * float2(2, -2), SvPosition.z);
	return float4(NDCPos.xyz, 1) * SvPosition.w;
}
float4 UnpackNormalMap( float4 TextureSample )
{
		float2 NormalXY = TextureSample.rg;
	NormalXY = NormalXY * float2(2.0f,2.0f) - float2(1.0f,1.0f);
	float NormalZ = sqrt( saturate( 1.0f - dot( NormalXY, NormalXY ) ) );
	return float4( NormalXY.xy, NormalZ, 1.0f );
}
float3 TransformTangentVectorToWorld(float3x3 TangentToWorld, float3 InTangentVector)
{
	return mul(InTangentVector, TangentToWorld);
}
float4 EncodeVelocityToTexture(float3 V, bool bHasPixelAnimation)
{
		V.xy = sign(V.xy) * sqrt(abs(V.xy)) * (2.0 / sqrt(2.0));
	float4 EncodedV;
	EncodedV.xy = V.xy * (0.499f * 0.5f) + 32767.0f / 65535.0f;
		uint Vz = asuint(V.z);
		EncodedV.z = saturate(float((Vz >> 16) & 0xFFFF) * rcp(65535.0f) + (0.1 / 65535.0f));
		EncodedV.w = saturate(float(((Vz >>  0) & 0xFFFE) | uint(bHasPixelAnimation)) * rcp(65535.0f) + (0.1 / 65535.0f));
	return EncodedV;
}
float4 EncodeVelocityToTexture(float3 V)
{
	return EncodeVelocityToTexture(V,  false);
}
FLWCScalar DFToWS(FDFScalar In) { return DFToTileOffset(In); }
FLWCScalar DFFastToWS(FDFScalar In) { return DFFastToTileOffset(In); }
FLWCVector2 DFToWS(FDFVector2 In) { return DFToTileOffset(In); }
FLWCVector2 DFFastToWS(FDFVector2 In) { return DFFastToTileOffset(In); }
FLWCVector3 DFToWS(FDFVector3 In) { return DFToTileOffset(In); }
FLWCVector3 DFFastToWS(FDFVector3 In) { return DFFastToTileOffset(In); }
FLWCVector4 DFToWS(FDFVector4 In) { return DFToTileOffset(In); }
FLWCVector4 DFFastToWS(FDFVector4 In) { return DFFastToTileOffset(In); }
FLWCMatrix DFToWS(FDFMatrix In) { return DFToTileOffset(In); }
FLWCMatrix DFFastToWS(FDFMatrix In) { return DFFastToTileOffset(In); }
FLWCInverseMatrix DFToWS(FDFInverseMatrix In) { return DFToTileOffset(In); }
FLWCInverseMatrix DFFastToWS(FDFInverseMatrix In) { return DFFastToTileOffset(In); }
float DFToWS( float In) { return In; }
float2 DFToWS( float2 In) { return In; }
float3 DFToWS( float3 In) { return In; }
float4 DFToWS( float4 In) { return In; }
float3x3 GetTangentBasis( float3 TangentZ )
{
	const float Sign = TangentZ.z >= 0 ? 1 : -1;
	const float a = -rcp( Sign + TangentZ.z );
	const float b = TangentZ.x * TangentZ.y * a;
	float3 TangentX = { 1 + Sign * a * Pow2( TangentZ.x ), Sign * b, -Sign * TangentZ.x };
	float3 TangentY = { b,  Sign + a * Pow2( TangentZ.y ), -TangentZ.y };
	return float3x3( TangentX, TangentY, TangentZ );
}
float3 TangentToWorld( float3 Vec, float3 TangentZ )
{
	return mul( Vec, GetTangentBasis( TangentZ ) );
}
struct FPrimitiveSceneData
{
	uint		Flags;
	uint		VisibilityFlags;
	int			InstanceSceneDataOffset; 
	int			NumInstanceSceneDataEntries;
	int			PersistentPrimitiveIndex;
	uint		SingleCaptureIndex; 
	float3		PositionHigh;
	uint		PrimitiveComponentId; 
	FDFMatrix	LocalToWorld;
	FDFInverseMatrix WorldToLocal;
	FDFMatrix	PreviousLocalToWorld;
	FDFInverseMatrix PreviousWorldToLocal;
	float4x4	WorldToPreviousWorld; 
	float3		InvNonUniformScale;
	float		ObjectBoundsX;
	FDFVector3	ObjectWorldPosition;
	FDFVector3	ActorWorldPosition;
	float		MinMaterialDisplacement;
	float		MaxMaterialDisplacement;
	FLWCVector3	ObjectWorldPositionTO;
	FLWCVector3	ActorWorldPositionTO;
	float		ObjectRadius;
	uint		LightmapUVIndex;   
	float3		ObjectOrientation; 
	uint		LightmapDataIndex; 
	float4		NonUniformScale;
	float3		PreSkinnedLocalBoundsMin;
	uint		NaniteResourceID;
	float3		PreSkinnedLocalBoundsMax;
	uint		NaniteHierarchyOffset;
	float3		LocalObjectBoundsMin;
	float		ObjectBoundsY;
	float3		LocalObjectBoundsMax;
	float		ObjectBoundsZ;
	uint		InstancePayloadDataOffset;
	uint		InstancePayloadDataStride;
	uint		InstancePayloadExtensionSize;
	float3		InstanceLocalBoundsCenter;
	float3		InstanceLocalBoundsExtent;
	float3		WireframeColor; 
	float3		PrimitiveColor; 
	uint		PackedNaniteFlags;
	float2 		InstanceDrawDistanceMinMaxSquared;
	float		InstanceWPODisableDistanceSquared;
	uint		NaniteRayTracingDataOffset;
	float		MaxWPOExtent;
	uint		CustomStencilValueAndMask;
	float4		CustomPrimitiveData[9u]; 
};
float3 UnpackColorRGB24(float PackedColorFloat)
{
	uint PackedColor = asuint(PackedColorFloat);
	return float3
	(
		float((PackedColor >> 24u) & 0xFF),
		float((PackedColor >> 16u) & 0xFF),
		float((PackedColor >>  8u) & 0xFF)
	) * (1.0f / 255.0f);
}
struct FInstanceSceneEditorData
{
	float3 HitProxyId;
	uint   HitProxyPacked;
	bool bIsSelected;
};
struct FInstanceSceneData
{
	FDFMatrix LocalToWorld;
	FDFMatrix PrevLocalToWorld;
	FDFInverseMatrix WorldToLocal;
	float4   NonUniformScale;
	float3   InvNonUniformScale;
	float    DeterminantSign;
	float3   LocalBoundsCenter;
	uint     PrimitiveId;
	uint     RelativeId;
	uint     PayloadDataOffset;
	uint     PayloadExtensionOffset;
	uint     PayloadExtensionSize;
	float3   LocalBoundsExtent;
	uint     LastUpdateSceneFrameNumber;
	uint     NaniteRuntimeResourceID;
	uint     NaniteHierarchyOffset;
	float    RandomID;
	float4   LightMapAndShadowMapUVBias;
	bool     ValidInstance;
	uint     Flags;
	FInstanceSceneEditorData EditorData;
};
float4 LoadPrimitivePrimitiveSceneDataElement(uint PrimitiveIndex, uint ItemIndex)
{
	uint TargetIdx = PrimitiveIndex + ItemIndex;
	 { };
	return Scene_GPUScene_GPUScenePrimitiveSceneData[TargetIdx];
}
FPrimitiveSceneData GetPrimitiveData(uint PrimitiveId)
{
	FPrimitiveSceneData PrimitiveData = (FPrimitiveSceneData)0;
	uint PrimitiveIndex = PrimitiveId * 42;
	float3 PositionHigh = LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 1).xyz;
	const float4x4 LocalToWorld = transpose(float4x4(
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 2),
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 3),
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 4),
		float4(0, 0, 0, 1)
	));
	const float4x4 PreviousLocalToWorld = transpose(float4x4(
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 8),
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 9),
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 10),
		float4(0, 0, 0, 1)
	));
	const float4x4 WorldToLocal = transpose(float4x4(
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 5),
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 6),
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 7),
		float4(0, 0, 0, 1)
	));
	const float4x4 PreviousWorldToLocal = transpose(float4x4(
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 11),
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 12),
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 13),
		float4(0, 0, 0, 1)
	));
	const float4x4 WorldToPreviousWorld = transpose(float4x4(
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 14),
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 15),
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 16),
		float4(0, 0, 0, 1)
	));
	float4 ObjectWorldPositionHighAndRadius	= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 18);
	float4 ObjectWorldPositionLow			= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 19);
	float4 ActorWorldPositionHigh	= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 20);
	float4 ActorWorldPositionLow	= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 21);
	PrimitiveData.Flags									= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 0).x);
	PrimitiveData.InstanceSceneDataOffset				= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 0).y);
	PrimitiveData.NumInstanceSceneDataEntries			= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 0).z);
	PrimitiveData.SingleCaptureIndex					= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 0).w) & 0xFFFFu;
	PrimitiveData.VisibilityFlags						= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 0).w) >> 16u;
	PrimitiveData.PositionHigh							= PositionHigh; 
	PrimitiveData.PrimitiveComponentId					= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 1).w);
	PrimitiveData.LocalToWorld							= MakeDFMatrix4x3(PositionHigh, LocalToWorld);
	PrimitiveData.WorldToLocal							= MakeDFInverseMatrix4x3(PositionHigh, WorldToLocal);
	PrimitiveData.PreviousLocalToWorld					= MakeDFMatrix4x3(PositionHigh, PreviousLocalToWorld);
	PrimitiveData.PreviousWorldToLocal					= MakeDFInverseMatrix4x3(PositionHigh, PreviousWorldToLocal);
	PrimitiveData.WorldToPreviousWorld					= WorldToPreviousWorld;
	PrimitiveData.InvNonUniformScale					= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 17).xyz;
	PrimitiveData.ObjectBoundsX							= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 17).w;
	PrimitiveData.ObjectRadius							= ObjectWorldPositionHighAndRadius.w;
	PrimitiveData.ObjectWorldPositionTO					= MakeLWCVector3(ObjectWorldPositionHighAndRadius.xyz, ObjectWorldPositionLow.xyz);
	PrimitiveData.ActorWorldPositionTO					= MakeLWCVector3(ActorWorldPositionHigh.xyz, ActorWorldPositionLow.xyz);
	PrimitiveData.ObjectWorldPosition					= DFFromTileOffset(PrimitiveData.ObjectWorldPositionTO);
	PrimitiveData.ActorWorldPosition					= DFFromTileOffset(PrimitiveData.ActorWorldPositionTO);
	PrimitiveData.MinMaterialDisplacement				= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 19).w;
	PrimitiveData.MaxMaterialDisplacement				= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 20).w;
	PrimitiveData.LightmapUVIndex						= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 21).w);
	PrimitiveData.ObjectOrientation						= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 22).xyz;
	PrimitiveData.LightmapDataIndex						= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 22).w);
	PrimitiveData.NonUniformScale						= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 23);
	PrimitiveData.PreSkinnedLocalBoundsMin				= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 24).xyz;
	PrimitiveData.NaniteResourceID						= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 24).w);
	PrimitiveData.PreSkinnedLocalBoundsMax				= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 25).xyz;
	PrimitiveData.NaniteHierarchyOffset					= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 25).w);
	PrimitiveData.LocalObjectBoundsMin					= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 26).xyz;
	PrimitiveData.ObjectBoundsY							= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 26).w;
	PrimitiveData.LocalObjectBoundsMax					= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 27).xyz;
	PrimitiveData.ObjectBoundsZ							= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 27).w;
	PrimitiveData.InstanceLocalBoundsCenter				= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 28).xyz;
	PrimitiveData.InstancePayloadDataOffset				= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 28).w);
	PrimitiveData.InstanceLocalBoundsExtent				= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 29).xyz;
	PrimitiveData.InstancePayloadDataStride				= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 29).w) & 0x00FFFFFFu;
	PrimitiveData.InstancePayloadExtensionSize			= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 29).w) >> 24;
	PrimitiveData.WireframeColor						= UnpackColorRGB24(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 30).x);
	PrimitiveData.PrimitiveColor						= UnpackColorRGB24(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 30).y);
	PrimitiveData.PackedNaniteFlags						= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 30).z);
	PrimitiveData.PersistentPrimitiveIndex				= asint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 30).w);
	PrimitiveData.InstanceDrawDistanceMinMaxSquared		= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 31).xy;
	PrimitiveData.InstanceWPODisableDistanceSquared		= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 31).z;
	PrimitiveData.NaniteRayTracingDataOffset			= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 31).w);
	PrimitiveData.MaxWPOExtent							= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 32).x;
	PrimitiveData.CustomStencilValueAndMask				= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 32).y);
	[unroll]
	for (int DataIndex = 0; DataIndex < 9u; ++DataIndex)
	{
		PrimitiveData.CustomPrimitiveData[DataIndex] = LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex,  33 + DataIndex);
	}
	return PrimitiveData;
}
struct FSceneDataIntermediates
{
	uint PrimitiveId;
	uint InstanceId;
	uint ViewIndex;
	uint CullingFlags;
	uint InstanceIdLoadIndex;
	FInstanceSceneData InstanceData;
	FPrimitiveSceneData Primitive;
};
float4 ProcessMaterialColorTextureLookup(float4 TextureValue)
{
	return TextureValue;
}
float4 ProcessMaterialLinearColorTextureLookup(float4 TextureValue)
{
	return TextureValue;
}
struct FSubstrateData
{
	uint Dummy;
};
FSubstrateData GetInitialisedSubstrateData() { return (FSubstrateData)0; }
struct FMaterialParticleParameters
{
	float RelativeTime;
	float MotionBlurFade;
	float Random;
	float4 Velocity;
	float4 Color;
	float4 TranslatedWorldPositionAndSize;
	float4 PrevTranslatedWorldPositionAndSize;
	FLWCVector3 WorldPosition;
	FLWCVector3 PrevWorldPosition;
	float4 MacroUV;
	float4 DynamicParameter;
	FDFMatrix ParticleToWorld;
	FDFInverseMatrix WorldToParticle;
	float2 Size;
	float SpriteRotation;
};
struct FMaterialAttributes
{
	float3 BaseColor;
	float Metallic;
	float Specular;
	float Roughness;
	float Anisotropy;
	float3 EmissiveColor;
	float Opacity;
	float OpacityMask;
	float3 Normal;
	float3 Tangent;
	float3 WorldPositionOffset;
	float Displacement;
	float3 SubsurfaceColor;
	float ClearCoat;
	float ClearCoatRoughness;
	float AmbientOcclusion;
	float3 Refraction;
	float PixelDepthOffset;
	uint ShadingModel;
	float SurfaceThickness;
	FSubstrateData FrontMaterial;
	float2 CustomizedUV0;
	float2 CustomizedUV1;
	float2 CustomizedUV2;
	float2 CustomizedUV3;
	float2 CustomizedUV4;
	float2 CustomizedUV5;
	float2 CustomizedUV6;
	float2 CustomizedUV7;
	float3 BentNormal;
	float3 ClearCoatBottomNormal;
	float3 CustomEyeTangent;
	float3 TransmittanceColor;
};
struct FPixelMaterialInputs
{
	float3 EmissiveColor;
	float Opacity;
	float OpacityMask;
	float3 BaseColor;
	float Metallic;
	float Specular;
	float Roughness;
	float Anisotropy;
	float3 Normal;
	float3 Tangent;
	float4 Subsurface;
	float AmbientOcclusion;
	float3 Refraction;
	float PixelDepthOffset;
	uint ShadingModel;
	FSubstrateData FrontMaterial;
	float SurfaceThickness;
	float Displacement;
};
struct FMaterialLWCData
{
	FLWCVector3 AbsoluteWorldPosition;
	FLWCVector3 WorldPosition_NoOffsets;
	FLWCMatrix	LocalToWorld;
	FLWCInverseMatrix WorldToLocal;
	FLWCMatrix	PreviousLocalToWorld;
	FLWCInverseMatrix PreviousWorldToLocal;
	FLWCMatrix	InstanceToWorld;
	FLWCInverseMatrix WorldToInstance;
	FLWCMatrix	PreviousInstanceToWorld;
	FLWCVector3	ObjectWorldPosition;
	FLWCVector3	ActorWorldPosition;
	FLWCMatrix ParticleToWorld;
	FLWCInverseMatrix WorldToParticle;
	FLWCVector3 ParticleWorldPosition;
	FLWCVector3 PrevParticleWorldPosition;
	FLWCVector3 PreViewTranslation;
	FLWCVector3 PrevPreViewTranslation;
	FLWCVector3 WorldViewOrigin;
	FLWCVector3 PrevWorldViewOrigin;
	FLWCVector3 WorldCameraOrigin;
	FLWCVector3 PrevWorldCameraOrigin;
};
struct FMaterialPixelParameters
{
	float2 TexCoords[3];
	float4 VertexColor;
	float3 WorldNormal;
	float3 WorldTangent;
	float3 ReflectionVector;
	float3 CameraVector;
	float3 LightVector;
	float4 SvPosition;
	float4 ScreenPosition;
	float2 ViewBufferUV;
	float UnMirrored;
	float TwoSidedSign;
	float3x3 TangentToWorld;
	FDFVector3 AbsoluteWorldPosition;
	float3 WorldPosition_CamRelative;
	FDFVector3 WorldPosition_NoOffsets;
	float3 WorldPosition_NoOffsets_CamRelative;
	float3 LightingPositionOffset;
	float3 WorldPosition_DDX;
	float3 WorldPosition_DDY;
	float4 VertexColor_DDX;
	float4 VertexColor_DDY;
	float4 ScreenPosition_DDX;
	float4 ScreenPosition_DDY;
	float2 TexCoords_DDX[3];
	float2 TexCoords_DDY[3];
	float AOMaterialMask;
	float PerInstanceRandom;
	uint PrimitiveId;
	FMaterialParticleParameters Particle;
	uint Dummy;
	FMaterialAttributes MaterialAttributes;
	FMaterialLWCData LWCData;
};
FMaterialPixelParameters MakeInitializedMaterialPixelParameters()
{
	FMaterialPixelParameters MPP;
	MPP = (FMaterialPixelParameters)0;
	MPP.TangentToWorld = float3x3(1,0,0,0,1,0,0,0,1);
	return MPP;
}
struct FMaterialVertexParameters
{
	float3 WorldPosition;
	float3x3 TangentToWorld;
	float PerInstanceRandom;
	FDFMatrix PrevFrameLocalToWorld;
	float3 PreSkinnedPosition;
	float3 PreSkinnedNormal;
	float4 VertexColor;
	float2 TexCoords[1];
	float2 CustomInterpolators[2];
	FMaterialParticleParameters Particle;
	FMaterialAttributes MaterialAttributes;
	FSceneDataIntermediates SceneData;
	uint PrimitiveId;
	bool bEvaluateWorldPositionOffset;
	FMaterialLWCData LWCData;
};
FPrimitiveSceneData GetPrimitiveData(FMaterialVertexParameters Parameters)
{
	return Parameters.SceneData.Primitive;
}
FPrimitiveSceneData GetPrimitiveData(FMaterialPixelParameters Parameters)
{
	return GetPrimitiveData(Parameters.PrimitiveId);
}
FDFInverseMatrix GetWorldToInstanceDF(FMaterialVertexParameters Parameters)
{
		return GetPrimitiveData(Parameters).WorldToLocal;
}
FDFInverseMatrix GetWorldToInstanceDF(FMaterialPixelParameters Parameters)
{
		return GetPrimitiveData(Parameters).WorldToLocal;
}
FDFMatrix GetInstanceToWorldDF(FMaterialVertexParameters Parameters)
{
		return GetPrimitiveData(Parameters).LocalToWorld;
}
FDFMatrix GetPrevInstanceToWorldDF(FMaterialVertexParameters Parameters)
{
	return GetPrimitiveData(Parameters).PreviousLocalToWorld;
}
FDFMatrix GetInstanceToWorldDF(FMaterialPixelParameters Parameters)
{
		return GetPrimitiveData(Parameters).LocalToWorld;
}
FDFMatrix GetPrevInstanceToWorldDF(FMaterialPixelParameters Parameters)
{
	return GetPrimitiveData(Parameters).PreviousLocalToWorld;
}
float4 GetScreenPosition(FMaterialVertexParameters Parameters)
{
	return mul(float4(Parameters.WorldPosition, 1.0f), ResolvedView.TranslatedWorldToClip);
}
float4 GetScreenPosition(FMaterialPixelParameters Parameters)
{
	return Parameters.ScreenPosition;
}
float GetPixelDepth(FMaterialVertexParameters Parameters)
{
	[flatten]
	if (View.ViewToClip[3][3] < 1.0f)
	{
		return GetScreenPosition(Parameters).w;
	}
	else
	{
		return ConvertFromDeviceZ(GetScreenPosition(Parameters).z);
	}
}
float GetPixelDepth(FMaterialPixelParameters Parameters)
{
	[flatten]
	if (View.ViewToClip[3][3] < 1.0f)
	{
		return GetScreenPosition(Parameters).w;
	}
	else
	{
		return ConvertFromDeviceZ(GetScreenPosition(Parameters).z);
	}
}
FDFMatrix GetLocalToWorldDF(FMaterialVertexParameters Parameters)
{
	return GetPrimitiveData(Parameters).LocalToWorld;
}
FDFMatrix GetLocalToWorldDF(FMaterialPixelParameters Parameters)
{
	return GetPrimitiveData(Parameters).LocalToWorld;
}
FDFMatrix GetPrevLocalToWorldDF(FMaterialVertexParameters Parameters)
{
	return GetPrimitiveData(Parameters).PreviousLocalToWorld;
}
FDFMatrix GetPrevLocalToWorldDF(FMaterialPixelParameters Parameters)
{
	return GetPrimitiveData(Parameters).PreviousLocalToWorld;
}
FDFInverseMatrix GetWorldToLocalDF(FMaterialVertexParameters Parameters)
{
	return GetPrimitiveData(Parameters).WorldToLocal;
}
FDFInverseMatrix GetWorldToLocalDF(FMaterialPixelParameters Parameters)
{
	return GetPrimitiveData(Parameters).WorldToLocal;
}
FDFInverseMatrix GetPrevWorldToLocalDF(FMaterialVertexParameters Parameters)
{
	return GetPrimitiveData(Parameters).PreviousWorldToLocal;
}
FDFInverseMatrix GetPrevWorldToLocalDF(FMaterialPixelParameters Parameters)
{
	return GetPrimitiveData(Parameters).PreviousWorldToLocal;
}
FMaterialLWCData MakeMaterialLWCData(FMaterialVertexParameters Parameters)
{
	FMaterialLWCData Result = (FMaterialLWCData)0;
	Result.PreViewTranslation = ResolvedView.TileOffset.PreViewTranslation;
	Result.PrevPreViewTranslation = ResolvedView.TileOffset.PrevPreViewTranslation;
	Result.WorldViewOrigin = ResolvedView.TileOffset.WorldViewOrigin;
	Result.PrevWorldViewOrigin = ResolvedView.TileOffset.PrevWorldViewOrigin;
	Result.WorldCameraOrigin = ResolvedView.TileOffset.WorldCameraOrigin;
	Result.PrevWorldCameraOrigin = ResolvedView.TileOffset.PrevWorldCameraOrigin;
	Result.AbsoluteWorldPosition = LWCSubtract(Parameters.WorldPosition, Result.PreViewTranslation);
	Result.InstanceToWorld = DFToWS(GetInstanceToWorldDF(Parameters));
	Result.WorldToInstance = DFFastToWS(GetWorldToInstanceDF(Parameters));
	Result.PreviousInstanceToWorld = DFToWS(GetPrevInstanceToWorldDF(Parameters));
	Result.LocalToWorld = DFToWS(GetLocalToWorldDF(Parameters));
	Result.WorldToLocal = DFFastToWS(GetWorldToLocalDF(Parameters));
	Result.PreviousLocalToWorld = DFToWS(GetPrevLocalToWorldDF(Parameters));
	Result.PreviousWorldToLocal = DFFastToWS(GetPrevWorldToLocalDF(Parameters));
	Result.ObjectWorldPosition = GetPrimitiveData(Parameters).ObjectWorldPositionTO;
	Result.ActorWorldPosition = GetPrimitiveData(Parameters).ActorWorldPositionTO;
	Result.ParticleToWorld = DFFastToWS(Parameters.Particle.ParticleToWorld);
	Result.WorldToParticle = DFFastToWS(Parameters.Particle.WorldToParticle);
	Result.ParticleWorldPosition = LWCSubtract(Parameters.Particle.TranslatedWorldPositionAndSize.xyz, Result.PreViewTranslation);
	Result.PrevParticleWorldPosition = LWCSubtract(Parameters.Particle.PrevTranslatedWorldPositionAndSize.xyz, Result.PrevPreViewTranslation);
	return Result;
}
FMaterialLWCData MakeMaterialLWCData(FMaterialPixelParameters Parameters)
{
	FMaterialLWCData Result = (FMaterialLWCData)0;
	Result.PreViewTranslation = ResolvedView.TileOffset.PreViewTranslation;
	Result.PrevPreViewTranslation = ResolvedView.TileOffset.PrevPreViewTranslation;
	Result.WorldViewOrigin = ResolvedView.TileOffset.WorldViewOrigin;
	Result.PrevWorldViewOrigin = ResolvedView.TileOffset.PrevWorldViewOrigin;
	Result.WorldCameraOrigin = ResolvedView.TileOffset.WorldCameraOrigin;
	Result.PrevWorldCameraOrigin = ResolvedView.TileOffset.PrevWorldCameraOrigin;
	Result.AbsoluteWorldPosition = LWCSubtract(Parameters.WorldPosition_CamRelative, Result.PreViewTranslation);
	Result.WorldPosition_NoOffsets = LWCSubtract(Parameters.WorldPosition_NoOffsets_CamRelative, Result.PreViewTranslation);
	Result.InstanceToWorld = DFToWS(GetInstanceToWorldDF(Parameters));
	Result.WorldToInstance = DFFastToWS(GetWorldToInstanceDF(Parameters));
	Result.PreviousInstanceToWorld = DFToWS(GetPrevInstanceToWorldDF(Parameters));
	Result.LocalToWorld = DFToWS(GetLocalToWorldDF(Parameters));
	Result.WorldToLocal = DFFastToWS(GetWorldToLocalDF(Parameters));
	Result.PreviousLocalToWorld = DFToWS(GetPrevLocalToWorldDF(Parameters));
	Result.PreviousWorldToLocal = DFFastToWS(GetPrevWorldToLocalDF(Parameters));
	Result.ObjectWorldPosition = GetPrimitiveData(Parameters).ObjectWorldPositionTO;
	Result.ActorWorldPosition = GetPrimitiveData(Parameters).ActorWorldPositionTO;
	Result.ParticleToWorld = DFFastToWS(Parameters.Particle.ParticleToWorld);
	Result.WorldToParticle = DFFastToWS(Parameters.Particle.WorldToParticle);
	Result.ParticleWorldPosition = LWCSubtract(Parameters.Particle.TranslatedWorldPositionAndSize.xyz, Result.PreViewTranslation);
	Result.PrevParticleWorldPosition = LWCSubtract(Parameters.Particle.PrevTranslatedWorldPositionAndSize.xyz, Result.PrevPreViewTranslation);
	return Result;
}
SamplerState GetMaterialSharedSampler(SamplerState TextureSampler, SamplerState SharedSampler)
{
	return SharedSampler;
}
float3 ReflectionAboutCustomWorldNormal(FMaterialPixelParameters Parameters, float3 WorldNormal, bool bNormalizeInputNormal)
{
	if (bNormalizeInputNormal)
	{
		WorldNormal = normalize(WorldNormal);
	}
	return -Parameters.CameraVector + WorldNormal * dot(WorldNormal, Parameters.CameraVector) * 2.0;
}
float3 GetMaterialNormalRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Normal;
}
float3 GetMaterialNormal(FMaterialPixelParameters Parameters, FPixelMaterialInputs PixelMaterialInputs)
{
	float3 RetNormal;
	RetNormal = GetMaterialNormalRaw(PixelMaterialInputs);
	{
		float3 OverrideNormal = ResolvedView.NormalOverrideParameter.xyz;
		RetNormal = RetNormal * ResolvedView.NormalOverrideParameter.w + OverrideNormal;
	}
	return RetNormal;
}
float GetMaterialOpacityRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Opacity;
}
float GetMaterialOpacity(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialOpacityRaw(PixelMaterialInputs));
}
float3 TransformTangentNormalToWorld(float3x3 TangentToWorld, float3 TangentNormal)
{
	return normalize(float3(TransformTangentVectorToWorld(TangentToWorld, TangentNormal)));
}
void CalcPixelMaterialInputs(in out FMaterialPixelParameters Parameters, in out FPixelMaterialInputs PixelMaterialInputs)
{
	float2 Local0 = Parameters.TexCoords[0].xy;
	float Local1 =  1.0f;
	float4 Local2 = UnpackNormalMap(Texture2DSample(Material_Texture2D_0,GetMaterialSharedSampler(Material_Texture2D_0Sampler,View_MaterialTextureBilinearWrapedSampler),  Local0 ));
	float Local3 =  1.0f;
	float Local4 = (Local2.rgb.b + 1.00000000);
	float2 Local5 = (((float2)9.01791191) *   Local0 );
	float Local6 =  1.0f;
	float4 Local7 = UnpackNormalMap(Texture2DSample(Material_Texture2D_1,GetMaterialSharedSampler(Material_Texture2D_1Sampler,View_MaterialTextureBilinearWrapedSampler),  Local5 ));
	float Local8 =  1.0f;
	float Local9 =  1.0f;
	float4 Local10 = ProcessMaterialLinearColorTextureLookup(Texture2DSample(Material_Texture2D_2,GetMaterialSharedSampler(Material_Texture2D_2Sampler,View_MaterialTextureBilinearWrapedSampler),  Local0 ));
	float Local11 =  1.0f;
	float Local12 = lerp(0.00000000,1.00000000,Local10.g);
	float3 Local13 = lerp(Local7.rgb,float3(0.00000000,0.00000000,1.00000000).rgb,Local12);
	float2 Local14 = (  Local0  * ((float2)2.00000000));
	float2 Local15 = (float2(-0.50000000,-0.50000000) +   Local14 );
	float Local16 = dot(  Local15 ,float2(cos(3.45575213),0.30901721));
	float Local17 = dot(  Local15 ,float2(sin(3.45575213),cos(3.45575213)));
	float2 Local18 = float2(  Local16 ,  Local17 );
	float2 Local19 = (float2(0.50000000,0.50000000) +   Local18 );
	float Local20 =  1.0f;
	float4 Local21 = UnpackNormalMap(Texture2DSampleBias(Material_Texture2D_3,Material_Texture2D_3Sampler,  Local19 ,View.MaterialTextureMipBias));
	float Local22 =  1.0f;
	float Local23 =  1.0f;
	float4 Local24 = ProcessMaterialLinearColorTextureLookup(Texture2DSample(Material_Texture2D_4,GetMaterialSharedSampler(Material_Texture2D_4Sampler,View_MaterialTextureBilinearWrapedSampler),  Local0 ));
	float Local25 =  1.0f;
	float3 Local26 = lerp(Local13,Local21.rgb,Local24.r);
	float2 Local27 = (  Local0  * ((float2)8.00000000));
	float Local28 =  1.0f;
	float4 Local29 = UnpackNormalMap(Texture2DSample(Material_Texture2D_5,GetMaterialSharedSampler(Material_Texture2D_5Sampler,View_MaterialTextureBilinearWrapedSampler),  Local27 ));
	float Local30 =  1.0f;
	float3 Local31 = lerp(Local29.rgb,float3(0.00000000,0.00000000,1.00000000).rgb,Local12);
	float3 Local32 = lerp(Local26,Local31,Local24.g);
	float2 Local33 = (  Local0  * ((float2)3.50000000));
	float2 Local34 = (  Local33  * ((float2)3.00000000));
	float Local35 =  1.0f;
	float4 Local36 = UnpackNormalMap(Texture2DSample(Material_Texture2D_6,GetMaterialSharedSampler(Material_Texture2D_6Sampler,View_MaterialTextureBilinearWrapedSampler),  Local34 ));
	float Local37 =  1.0f;
	float Local38 = (Local10.r + 0.00000000);
	float Local39 = saturate(Local38);
	float Local40 = lerp(0.50000000,1.00000000,Local39);
	float3 Local41 = lerp(Local36.rgb,float3(0.00000000,0.00000000,1.00000000).rgb,Local40);
	float3 Local42 = lerp(Local32,Local41,Local24.b);
	float2 Local43 = (  Local0  * ((float2)20.74921989));
	float2 Local44 = (  Local43  * ((float2)0.50000000));
	float Local45 =  1.0f;
	float4 Local46 = UnpackNormalMap(Texture2DSample(Material_Texture2D_7,GetMaterialSharedSampler(Material_Texture2D_7Sampler,View_MaterialTextureBilinearWrapedSampler),  Local44 ));
	float Local47 =  1.0f;
	float3 Local48 = lerp(Local42,Local46.rgb,Local24.a);
	float Local49 =  1.0f;
	float4 Local50 = UnpackNormalMap(Texture2DSample(Material_Texture2D_8,GetMaterialSharedSampler(Material_Texture2D_8Sampler,View_MaterialTextureBilinearWrapedSampler),  Local27 ));
	float Local51 =  1.0f;
	float Local52 =  1.0f;
	float4 Local53 = ProcessMaterialLinearColorTextureLookup(Texture2DSample(Material_Texture2D_9,GetMaterialSharedSampler(Material_Texture2D_9Sampler,View_MaterialTextureBilinearWrapedSampler),  Local0 ));
	float Local54 =  1.0f;
	float3 Local55 = lerp(Local48,Local50.rgb,Local53.r);
	float3 Local56 = lerp(Local55,Local31,Local53.g);
	float2 Local57 = (((float2)14.00000000) *   Local0 );
	float Local58 =  1.0f;
	float4 Local59 = UnpackNormalMap(Texture2DSample(Material_Texture2D_10,GetMaterialSharedSampler(Material_Texture2D_10Sampler,View_MaterialTextureBilinearWrapedSampler),  Local57 ));
	float Local60 =  1.0f;
	float Local61 = lerp(0.40000001,0.88000000,Local10.g);
	float3 Local62 = lerp(Local59.rgb,float3(0.00000000,0.00000000,1.00000000).rgb,Local61);
	float3 Local63 = lerp(Local56,Local62,Local53.b);
	float2 Local64 = (((float2)Material.PreshaderBuffer[0].x) *   Local0 );
	float Local65 =  1.0f;
	float4 Local66 = UnpackNormalMap(Texture2DSample(Material_Texture2D_11,GetMaterialSharedSampler(Material_Texture2D_11Sampler,View_MaterialTextureBilinearWrapedSampler),  Local64 ));
	float Local67 =  1.0f;
	float3 Local68 = lerp(float3(0.00000000,0.00000000,1.00000000).rgb,Local66.rgb,Material.PreshaderBuffer[0].y);
	float Local69 =  1.0f;
	float4 Local70 = ProcessMaterialLinearColorTextureLookup(Texture2DSample(Material_Texture2D_12,GetMaterialSharedSampler(Material_Texture2D_12Sampler,View_MaterialTextureBilinearWrapedSampler),  Local0 ));
	float Local71 =  1.0f;
	float3 Local72 = lerp(Local63,Local68,Local70.r);
	float2 Local73 = (  Local0  * ((float2)4.00000000));
	float Local74 =  1.0f;
	float4 Local75 = UnpackNormalMap(Texture2DSample(Material_Texture2D_13,GetMaterialSharedSampler(Material_Texture2D_13Sampler,View_MaterialTextureBilinearWrapedSampler),  Local73 ));
	float Local76 =  1.0f;
	float3 Local77 = lerp(Local75.rgb,float3(0.00000000,0.00000000,1.00000000).rgb,0.33000001);
	float3 Local78 = lerp(Local72,Local77,Local53.a);
	float2 Local79 = (Local78.rg * ((float2)-1.00000000));
	float Local80 = dot(float3(Local2.rgb.rg,Local4),float3(Local79,Local78.b));
	float3 Local81 = (float3(Local2.rgb.rg,Local4) * ((float3)Local80));
	float3 Local82 = (((float3)Local4) * float3(Local79,Local78.b));
	float3 Local83 = (Local81 - Local82);
	float3 Local84 = normalize(Local83);
	PixelMaterialInputs.Normal = Local84.rgb.rgb.rgb.rgb;
	float3 MaterialNormal = GetMaterialNormal(Parameters, PixelMaterialInputs);
	MaterialNormal = normalize(MaterialNormal);
	Parameters.WorldNormal = TransformTangentNormalToWorld(Parameters.TangentToWorld, MaterialNormal);
	Parameters.WorldNormal *= Parameters.TwoSidedSign;
	Parameters.ReflectionVector = ReflectionAboutCustomWorldNormal(Parameters, Parameters.WorldNormal, false);
	Parameters.Particle.MotionBlurFade = 1.0f;
	float Local85 = (View.GameTime * -0.10000000);
	float Local86 = (View.GameTime * -0.20000000);
	float2 Local87 = (float2(Local85,Local86) +   Local14 );
	float Local88 =  1.0f;
	float4 Local89 = ProcessMaterialColorTextureLookup(Texture2DSample(Material_Texture2D_14,GetMaterialSharedSampler(Material_Texture2D_14Sampler,View_MaterialTextureBilinearWrapedSampler),  Local87 ));
	float Local90 =  1.0f;
	float Local91 = (Local70.g * Local89.g);
	float3 Local92 = lerp(Material.PreshaderBuffer[2].xyz,Material.PreshaderBuffer[1].xyz,Local91);
	float Local93 = (Local70.b + Local91);
	float3 Local94 = (Local92 * ((float3)Local93));
	float3 Local95 = (Local94 * ((float3)Material.PreshaderBuffer[2].w));
	float Local96 = (Local89.r * 0.01250000);
	float2 Local97 = (  Local14  + ((float2)Local96));
	float2 Local98 = (float2(Local85,Local86) + Local97);
	float Local99 =  1.0f;
	float4 Local100 = ProcessMaterialColorTextureLookup(Texture2DSample(Material_Texture2D_14,GetMaterialSharedSampler(Material_Texture2D_14Sampler,View_MaterialTextureBilinearWrapedSampler),Local98));
	float Local101 =  1.0f;
	float2 Local102 = (  Local0  + ((float2)Local96));
	float Local103 =  1.0f;
	float4 Local104 = ProcessMaterialColorTextureLookup(Texture2DSampleBias(Material_Texture2D_15,Material_Texture2D_15Sampler,Local102,View.MaterialTextureMipBias));
	float Local105 =  1.0f;
	float3 Local106 = (Local100.rgb * ((float3)Local104.g));
	float3 Local107 = lerp(Local106,((float3)Local104.g),0.50000000);
	float3 Local108 = PositiveClampedPow(Local107,((float3)Material.PreshaderBuffer[3].x));
	float3 Local109 = lerp(Material.PreshaderBuffer[4].xyz,Material.PreshaderBuffer[3].yzw,Local108);
	float Local110 = (Local10.a * Local104.g);
	float3 Local111 = (Local109 * ((float3)Local110));
	float3 Local112 = (((float3)Material.PreshaderBuffer[4].w) * Local111);
	float3 Local113 = (Local95 + Local112);
	float3 Local114 = (float3(0.00000000,0.00000000,0.00000000) + Local113);
	float3 Local115 = max(Local114,((float3)0.00000000));
	float4 Local116 = MaterialCollection0.Vectors[16];
	float4 Local117 = lerp(float4(0.89999998,0.00000000,0.00000000,1.00000000).rgba,Local116.rgba,Material.PreshaderBuffer[5].x);
	float4 Local118 = (Local117 * ((float4)Material.PreshaderBuffer[5].y));
	float4 Local119 = (Local118 * ((float4)Material.PreshaderBuffer[5].z));
	float3 Local120 = (Local115.rgb + Local119.xyz);
	float3 Local121 = max(Local120,((float3)0.00000000));
	float Local122 = GetPixelDepth(Parameters);
	float Local123 =   Local122 .r;
	float4 Local124 = MaterialCollection0.Vectors[1];
	float Local125 = (  Local123  - Local124.a);
	float Local126 = (  Local125  / 1200.00000000);
	float Local127 = saturate(  Local126 );
	float3 Local128 = (Parameters.CameraVector + float3(0.00000000,0.00000000,1.50000000).rgb);
	float3 Local129 = normalize(Local128);
	float Local130 = dot(Local129,Parameters.WorldNormal);
	float Local131 = saturate(Local130);
	float4 Local132 = MaterialCollection0.Vectors[0];
	float Local133 = (Local131 * Local132.g);
	float Local134 = (3.00000000 + View.MaterialTextureMipBias);
	float4 Local135 = ProcessMaterialLinearColorTextureLookup(Texture2DSampleBias(Material_Texture2D_2,Material_Texture2D_2Sampler,  Local0 ,Local134));
	float Local136 =  1.0f;
	float4 Local137 = ProcessMaterialLinearColorTextureLookup(Texture2DSampleBias(Material_Texture2D_2,Material_Texture2D_2Sampler,  Local0 ,View.MaterialTextureMipBias));
	float Local138 =  1.0f;
	float Local139 = (Local135.a - Local137.a);
	float Local140 = saturate(Local139);
	float Local141 = lerp(1.20000005,-2.00000000,Local140);
	float Local142 = saturate(Local141);
	float Local143 = (Local142 * Local137.a);
	float Local144 = PositiveClampedPow(Local143,2.00000000);
	float Local145 = (Local133 * Local144);
	float Local146 =  1.0f;
	float4 Local147 = ProcessMaterialColorTextureLookup(Texture2DSample(Material_Texture2D_16,GetMaterialSharedSampler(Material_Texture2D_16Sampler,View_MaterialTextureBilinearWrapedSampler),  Local5 ));
	float Local148 =  1.0f;
	float3 Local149 = (Local147.rgb * ((float3)1.89999998));
	float3 Local150 = saturate(Local149);
	float Local151 =  1.0f;
	float4 Local152 = ProcessMaterialColorTextureLookup(Texture2DSample(Material_Texture2D_17,GetMaterialSharedSampler(Material_Texture2D_17Sampler,View_MaterialTextureBilinearWrapedSampler),  Local0 ));
	float Local153 =  1.0f;
	float3 Local154 = (Material.PreshaderBuffer[6].xyz * Local152.rgb);
	float3 Local155 = (Local150 * Local154);
	float3 Local156 = (Local155 * ((float3)2.75000000));
	float3 Local157 = lerp(Local155,Local156,Local10.g);
	float3 Local158 = (Local157 * ((float3)0.80000001));
	float3 Local159 = (Local158 * Material.PreshaderBuffer[7].xyz);
	float3 Local160 = lerp(Local157,Local159,Local10.r);
	float Local161 = dot(Local160,float3(0.30000001,0.58999997,0.11000000));
	float3 Local162 = lerp(Local160,((float3)Local161),0.44999999);
	float3 Local163 = saturate(Local162);
	float3 Local164 = (Local163 * ((float3)Material.PreshaderBuffer[7].w));
	float Local165 =  1.0f;
	float4 Local166 = ProcessMaterialColorTextureLookup(Texture2DSampleBias(Material_Texture2D_18,Material_Texture2D_18Sampler,  Local19 ,View.MaterialTextureMipBias));
	float Local167 =  1.0f;
	float3 Local168 = (Material.PreshaderBuffer[8].xyz * Local166.rgb);
	float3 Local169 = lerp(Local168,Material.PreshaderBuffer[9].xyz,Local10.r);
	float3 Local170 = lerp(Local164,Local169,Local24.r);
	float3 Local171 = lerp(Material.PreshaderBuffer[10].xyz,float3(0.17500000,0.17500000,0.17500000).rgb,Local53.g);
	float Local172 =  1.0f;
	float4 Local173 = ProcessMaterialColorTextureLookup(Texture2DSample(Material_Texture2D_19,GetMaterialSharedSampler(Material_Texture2D_19Sampler,View_MaterialTextureBilinearWrapedSampler),  Local27 ));
	float Local174 =  1.0f;
	float3 Local175 = (Local171 * Local173.rgb);
	float3 Local176 = (Local175 * ((float3)2.79999995));
	float Local177 = dot(Local176,float3(0.30000001,0.58999997,0.11000000));
	float3 Local178 = lerp(Local176,((float3)Local177),0.12500000);
	float3 Local179 = lerp(Local175,Local178,Local10.g);
	float3 Local180 = saturate(Local179);
	float3 Local181 = lerp(float3(0.03000000,0.03000000,0.03000000).rgb,float3(0.08500000,0.06621600,0.05227500).rgb,Local53.g);
	float3 Local182 = (Local181 * ((float3)Local173.r));
	float3 Local183 = lerp(Local180,Local182,Local10.r);
	float3 Local184 = lerp(Local170,Local183,Local24.g);
	float Local185 =  1.0f;
	float4 Local186 = ProcessMaterialColorTextureLookup(Texture2DSample(Material_Texture2D_20,GetMaterialSharedSampler(Material_Texture2D_20Sampler,View_MaterialTextureBilinearWrapedSampler),  Local33 ));
	float Local187 =  1.0f;
	float Local188 = dot(Local186.rgb,float3(0.30000001,0.58999997,0.11000000));
	float3 Local189 = (Local186.rgb * Material.PreshaderBuffer[10].xyz);
	float3 Local190 = (Local189 * ((float3)1.10000002));
	float Local191 = dot(Local190,float3(0.30000001,0.58999997,0.11000000));
	float3 Local192 = lerp(Local190,((float3)Local191),0.44999999);
	float3 Local193 = lerp(Local189,float3(0.08500000,0.06002800,0.01627300).rgb,Local10.r);
	float3 Local194 = saturate(Local193);
	float3 Local195 = lerp(Local184,Local194,Local24.b);
	float Local196 =  1.0f;
	float4 Local197 = ProcessMaterialColorTextureLookup(Texture2DSample(Material_Texture2D_21,GetMaterialSharedSampler(Material_Texture2D_21Sampler,View_MaterialTextureBilinearWrapedSampler),  Local43 ));
	float Local198 =  1.0f;
	float3 Local199 = (float3(1.20000005,1.39719999,1.50000000).rgb * ((float3)Local197.r));
	float3 Local200 = lerp(Material.PreshaderBuffer[12].xyz,Material.PreshaderBuffer[11].xyz,Local197.g);
	float Local201 =  1.0f;
	float4 Local202 = ProcessMaterialColorTextureLookup(Texture2DSample(Material_Texture2D_22,GetMaterialSharedSampler(Material_Texture2D_22Sampler,View_MaterialTextureBilinearWrapedSampler),  Local44 ));
	float Local203 =  1.0f;
	float3 Local204 = lerp(Local199,Local200,Local202.r);
	float3 Local205 = lerp(Local204,float3(0.91000003,0.68115503,0.15925001).rgb,Local202.b);
	float3 Local206 = lerp(Local195,Local205,Local24.a);
	float Local207 =  1.0f;
	float4 Local208 = ProcessMaterialColorTextureLookup(Texture2DSample(Material_Texture2D_23,GetMaterialSharedSampler(Material_Texture2D_23Sampler,View_MaterialTextureBilinearWrapedSampler),  Local27 ));
	float Local209 =  1.0f;
	float3 Local210 = lerp(Local206,Local208.rgb,Local53.r);
	float3 Local211 = lerp(Local210,Local183,Local53.g);
	float Local212 =  1.0f;
	float4 Local213 = ProcessMaterialColorTextureLookup(Texture2DSample(Material_Texture2D_24,GetMaterialSharedSampler(Material_Texture2D_24Sampler,View_MaterialTextureBilinearWrapedSampler),  Local57 ));
	float Local214 =  1.0f;
	float3 Local215 = (Local213.rgb * Material.PreshaderBuffer[13].xyz);
	float Local216 = lerp(0.50000000,1.00000000,0.30000001);
	float3 Local217 = lerp(((float3)0.64999998),Local215,Local216);
	float3 Local218 = saturate(Local217);
	float3 Local219 = (Local218 * Material.PreshaderBuffer[14].xyz);
	float3 Local220 = lerp(Local215,Local219,Local10.g);
	float Local221 = lerp(0.50000000,1.00000000,1.00000000);
	float3 Local222 = lerp(((float3)0.64999998),Local220,Local221);
	float3 Local223 = saturate(Local222);
	float3 Local224 = (Local223 * Material.PreshaderBuffer[15].xyz);
	float3 Local225 = lerp(Local220,Local224,Local10.r);
	float Local226 = dot(Local225,float3(0.30000001,0.58999997,0.11000000));
	float3 Local227 = lerp(Local211,Local225,Local53.b);
	float Local228 = lerp(0.50000000,1.00000000,1.50000000);
	float3 Local229 = lerp(((float3)0.64999998),Material.PreshaderBuffer[16].xyz,Local228);
	float3 Local230 = saturate(Local229);
	float3 Local231 = (  Local230  * float3(0.05217000,0.00000000,1.00000000).rgb);
	float3 Local232 = lerp(Material.PreshaderBuffer[16].xyz,  Local231 ,Local10.r);
	float3 Local233 = lerp(Local227,Local232,Local70.r);
	float Local234 =  1.0f;
	float4 Local235 = ProcessMaterialColorTextureLookup(Texture2DSample(Material_Texture2D_25,GetMaterialSharedSampler(Material_Texture2D_25Sampler,View_MaterialTextureBilinearWrapedSampler),  Local73 ));
	float Local236 =  1.0f;
	float3 Local237 = (Local235.rgb * float3(0.34999999,0.31365699,0.28478101).rgb);
	float3 Local238 = lerp(Local233,Local237,Local53.a);
	float3 Local239 = lerp(float3(0.80000001,0.00000000,0.00000000).rgb,((float3)1.00000000),Material.PreshaderBuffer[16].w);
	float3 Local240 = (Local238.rgb * Local239);
	float Local241 = dot(Local240,float3(0.30000001,0.58999997,0.11000000));
	float3 Local242 = lerp(Local240,((float3)Local241),-2.00000000);
	float3 Local243 = (((float3)Local145) * Local242);
	float3 Local244 = float3(Parameters.TexCoords[1].x, Parameters.TexCoords[1].y, Parameters.TexCoords[2].x);
	float Local245 =   Local244 .b;
	float Local246 = (GetPrimitiveData(Parameters).ObjectRadius * 2.00000000);
	float Local247 = (  Local245  / Local246);
	float Local248 = (1.00000000 +   Local247 );
	float Local249 = (  Local248  * 0.50000000);
	float Local250 = lerp(-2.00000000,2.00000000,  Local249 );
	float Local251 = saturate(  Local250 );
	float3 Local252 = (Local243 * ((float3)  Local251 ));
	float3 Local253 = (((float3)  Local127 ) * Local252);
	float3 Local254 = (Local121 + Local253);
	float3 Local255 = max(Local254,((float3)0.00000000));
	float3 Local256 = lerp(((float3)0.00000000),Local255.rgb,Material.PreshaderBuffer[17].x);
	float3 Local257 = lerp(Local256.rgb.rgb,Material.PreshaderBuffer[18].xyz,Material.PreshaderBuffer[17].y);
	float3 Local258 = lerp(((float3)0.00000000),Local240.rgb,Material.PreshaderBuffer[17].x);
	float3 Local259 = (Local258.rgb.rgb * ((float3)Material.PreshaderBuffer[18].w));
	float Local260 = lerp(1.00000000,0.20000000,Local10.r);
	float Local261 = lerp(0.00000000,Local260,Local24.g);
	float Local262 = lerp(Local261,0.00000000,Local24.b);
	float Local263 = lerp(0.80000001,0.00000000,Local202.r);
	float Local264 = lerp(Local263,1.00000000,Local202.b);
	float Local265 = lerp(Local262,Local264,Local24.a);
	float Local266 = lerp(Local265,0.00000000,Local53.r);
	float Local267 = lerp(Local266,Local260,Local53.g);
	float Local268 = lerp(Local267,0.00000000,Local53.b);
	float Local269 = lerp(Local268,0.00000000,Local70.r);
	float Local270 = lerp(Local269,0.00000000,0.00000000);
	float Local271 = lerp(Local270,0.00000000,Local53.a);
	float3 Local272 = lerp(((float3)0.00000000),Local271.rrr.rgb,Material.PreshaderBuffer[17].x);
	float Local273 = lerp(0.66000003,0.25000000,Local147.a);
	float Local274 = lerp(Local273,0.05000000,Local10.r);
	float Local275 = lerp(Local274,0.55000001,Local24.r);
	float Local276 = lerp(Local275,0.50000000,Local24.g);
	float Local277 = lerp(0.50000000,0.20000000,Local10.r);
	float Local278 = lerp(Local276,Local277,Local24.b);
	float Local279 = lerp(Local278,0.25000000,Local24.a);
	float Local280 = lerp(Local279,0.50000000,Local53.r);
	float Local281 = lerp(Local280,0.50000000,Local53.g);
	float Local282 = PositiveClampedPow(Local213.a,Material.PreshaderBuffer[19].x);
	float Local283 = lerp(0.40000001,0.89999998,Local282);
	float Local284 = lerp(Local283,0.50000000,Local10.r);
	float Local285 = lerp(Local284,1.00000000,Local10.g);
	float Local286 = (1.00000000 - Local285);
	float Local287 = max(Local286,0.00000000);
	float Local288 = min(Local287,0.69999999);
	float Local289 = lerp(Local288,0.10000000,Local10.r);
	float Local290 = lerp(Local281,Local289,Local53.b);
	float Local291 = lerp(Local290,0.69999999,Local70.r);
	float Local292 = lerp(Local291,0.50000000,0.00000000);
	float Local293 = lerp(Local292,0.50000000,Local53.a);
	float3 Local294 = (Local293.rrr * ((float3)Local142));
	float3 Local295 = lerp(((float3)0.00000000),Local294.rgb,Material.PreshaderBuffer[17].x);
	float Local296 = lerp(0.40000001,0.69999999,Local147.a);
	float Local297 = lerp(Local296,1.00000000,Local10.r);
	float Local298 = lerp(Local297,0.50000000,Local10.g);
	float Local299 = lerp(0.50000000,1.00000000,Local166.a);
	float Local300 = (Local299 * 1.50000000);
	float Local301 = saturate(Local300);
	float Local302 = lerp(Local298,Local301,Local24.r);
	float Local303 = lerp(0.40000001,0.60000002,Local173.r);
	float Local304 = lerp(0.34999999,1.20000005,Local53.g);
	float Local305 = (Local303 * Local304);
	float Local306 = (Local305 * 0.50000000);
	float Local307 = lerp(Local305,Local306,Local10.g);
	float Local308 = lerp(Local307,0.89999998,Local10.r);
	float Local309 = lerp(Local302,Local308,Local24.g);
	float Local310 = lerp(0.34999999,0.60000002,Local186.a);
	float Local311 = (Local310 * 1.60000002);
	float Local312 = lerp(Local311,0.52999997,0.00000000);
	float Local313 = lerp(Local312,1.00000000,Local10.r);
	float Local314 = lerp(Local309,Local313,Local24.b);
	float Local315 = lerp(0.10000000,0.18000001,Local197.a);
	float Local316 = lerp(0.33000001,Local315,Local202.r);
	float Local317 = lerp(Local316,0.33000001,Local202.b);
	float Local318 = lerp(Local314,Local317,Local24.a);
	float Local319 = lerp(0.32499999,0.45500001,Local208.a);
	float Local320 = lerp(Local318,Local319,Local53.r);
	float Local321 = lerp(Local320,Local308,Local53.g);
	float Local322 = lerp(Local321,Local285,Local53.b);
	float Local323 = lerp(Local322,Material.PreshaderBuffer[19].y,Local70.r);
	float Local324 = lerp(Local323,0.50000000,0.00000000);
	float Local325 = lerp(0.33000001,1.00000000,Local235.a);
	float Local326 = (Local325 * 0.80000001);
	float Local327 = lerp(Local324,Local326,Local53.a);
	float3 Local328 = (((float3)1.00000000) - Local327.rrr);
	float3 Local329 = (Local328 * Local328);
	float3 Local330 = (((float3)1.00000000) - Local329);
	float Local331 = (1.00000000 - Local143);
	float Local332 = (Local331 * Local331);
	float3 Local333 = lerp(Local327.rrr,Local330,Local332);
	float3 Local334 = lerp(((float3)0.80000001),Local333.rgb,Material.PreshaderBuffer[17].x);
	float Local335 = lerp(Material.PreshaderBuffer[19].z,0.00000000,Local24.r);
	float Local336 = lerp(Local335,0.00000000,Local24.g);
	float Local337 = lerp(Local336,0.10000000,Local24.b);
	float Local338 = lerp(Local337,0.00000000,Local24.a);
	float Local339 = lerp(Local338,0.00000000,Local53.r);
	float Local340 = lerp(Local339,0.00000000,Local53.g);
	float Local341 = lerp(Local340,0.00000000,Local53.b);
	float Local342 = lerp(Local341,0.00000000,Local70.r);
	float Local343 = lerp(Local342,1.00000000,0.00000000);
	float Local344 = lerp(Local343,0.00000000,Local53.a);
	float3 Local345 = (Local344.rrr * ((float3)Material.PreshaderBuffer[16].w));
	float3 Local346 = (((float3)Material.PreshaderBuffer[17].x) * Local345.rgb);
	float3 Local373 = (Local162 * ((float3)Material.PreshaderBuffer[21].w));
	float3 Local374 = lerp(Local373,((float3)0.00000000),Local24.r);
	float3 Local375 = lerp(Local374,((float3)0.00000000),Local24.g);
	float3 Local376 = lerp(Local375,((float3)0.00000000),Local24.b);
	float3 Local377 = lerp(Local376,((float3)0.00000000),Local24.a);
	float3 Local378 = lerp(Local377,((float3)0.00000000),Local53.r);
	float3 Local379 = lerp(Local378,((float3)0.00000000),Local53.g);
	float3 Local380 = lerp(Local379,((float3)0.00000000),Local53.b);
	float3 Local381 = lerp(Local380,((float3)0.00000000),Local70.r);
	float3 Local382 = lerp(Local381,((float3)0.00000000),Local53.a);
	float3 Local383 = lerp(((float3)0.00000000),Local382.rgb.rgb,Material.PreshaderBuffer[17].x);
	float3 Local384 = (Local383.rgb.rgb * ((float3)Material.PreshaderBuffer[18].w));
	float Local385 = lerp(Material.PreshaderBuffer[22].y,0.00000000,Local24.r);
	float Local386 = lerp(Local385,0.00000000,Local24.g);
	float Local387 = lerp(Local386,0.00000000,Local24.b);
	float Local388 = lerp(Local387,0.00000000,Local24.a);
	float Local389 = lerp(Local388,0.00000000,Local53.r);
	float Local390 = lerp(Local389,0.00000000,Local53.g);
	float Local391 = lerp(Local390,0.00000000,Local53.b);
	float Local392 = lerp(Local391,0.00000000,Local70.r);
	float Local393 = lerp(Local392,1.00000000,0.00000000);
	float Local394 = lerp(Local393,0.00000000,Local53.a);
	float Local395 = lerp(Local137.a,Local135.a,0.50000000);
	float Local396 = lerp(Local395,1.00000000,0.05000000);
	PixelMaterialInputs.EmissiveColor = Local257;
	PixelMaterialInputs.Opacity = Local346.rgb.rgb;
	PixelMaterialInputs.OpacityMask = 1.00000000;
	PixelMaterialInputs.BaseColor = Local259;
	PixelMaterialInputs.Metallic = Local272.rgb.rgb;
	PixelMaterialInputs.Specular = Local295.rgb.rgb;
	PixelMaterialInputs.Roughness = Local334.rgb.rgb;
	PixelMaterialInputs.Anisotropy = 0.00000000;
	PixelMaterialInputs.Normal = Local84.rgb.rgb.rgb.rgb;
	PixelMaterialInputs.Tangent = float3(1.00000000,0.00000000,0.00000000);
	PixelMaterialInputs.Subsurface = float4(Local384,Material.PreshaderBuffer[22].x);
	PixelMaterialInputs.AmbientOcclusion = Local396.rrr.rgb.rgb;
	PixelMaterialInputs.Refraction = 0;
	PixelMaterialInputs.PixelDepthOffset = 0.00000000.rrr.rgb.rgb.rgb.r;
	PixelMaterialInputs.ShadingModel = 8;
	PixelMaterialInputs.FrontMaterial = GetInitialisedSubstrateData();
	PixelMaterialInputs.SurfaceThickness = 0.01000000;
	PixelMaterialInputs.Displacement = 0.50000000;
	Parameters.WorldTangent = 0;
}
void ClipLODTransition(float2 SvPosition, float DitherFactor)
{
	if (abs(DitherFactor) > .001)
	{
		float ArgCos = dot(floor(SvPosition.xy), float2(347.83451793, 3343.28371963));
		float RandCos = cos(ArgCos);
		float RandomVal = frac(RandCos * 1000.0);
		float RetVal = (DitherFactor < 0.0) ?
			(DitherFactor + 1.0 > RandomVal) :
			(DitherFactor < RandomVal);
		clip(RetVal - .001);
	}
}
void ClipLODTransition(FMaterialPixelParameters Parameters, float DitherFactor)
{
	ClipLODTransition(Parameters.SvPosition.xy, DitherFactor);
}
void ClipLODTransition(FMaterialPixelParameters Parameters)
{
}
void ClipLODTransition(float2 SvPosition)
{
}
void GetMaterialCoverageAndClipping(FMaterialPixelParameters Parameters, FPixelMaterialInputs PixelMaterialInputs)
{
	ClipLODTransition(Parameters);
}
void GetMaterialClippingVelocity(FMaterialPixelParameters Parameters, FPixelMaterialInputs PixelMaterialInputs, bool bIsThinTranslucent, float MaterialOpacity)
{
	GetMaterialCoverageAndClipping(Parameters, PixelMaterialInputs);
}
void CalcMaterialParametersEx(
	in out FMaterialPixelParameters Parameters,
	in out FPixelMaterialInputs PixelMaterialInputs,
	float4 SvPosition,
	float4 ScreenPosition,
	bool bIsFrontFace,
	float3 TranslatedWorldPosition,
	float3 TranslatedWorldPositionExcludingShaderOffsets)
{
	Parameters.WorldPosition_CamRelative = TranslatedWorldPosition;
	Parameters.WorldPosition_NoOffsets_CamRelative = TranslatedWorldPositionExcludingShaderOffsets;
	Parameters.LWCData = MakeMaterialLWCData(Parameters);
	Parameters.AbsoluteWorldPosition = DFMultiplyLHSAndFastTwoSum(Parameters.LWCData.AbsoluteWorldPosition.Tile, 2097152.00f, Parameters.LWCData.AbsoluteWorldPosition.Offset);
	Parameters.WorldPosition_NoOffsets = DFMultiplyLHSAndFastTwoSum(Parameters.LWCData.WorldPosition_NoOffsets.Tile, 2097152.00f, Parameters.LWCData.WorldPosition_NoOffsets.Offset);
	Parameters.SvPosition = SvPosition;
	Parameters.ScreenPosition = ScreenPosition;
	Parameters.ViewBufferUV = ScreenPositionToBufferUV(ScreenPosition);
		Parameters.CameraVector =  select_internal( IsOrthoProjection(ResolvedView) , -ResolvedView.ViewForward , normalize(-Parameters.WorldPosition_CamRelative.xyz) );
	Parameters.LightVector = 0;
	Parameters.TwoSidedSign = 1.0f;
	{
		CalcPixelMaterialInputs(Parameters, PixelMaterialInputs);
	}
}
float3x3 AssembleTangentToWorld( float3 TangentToWorld0, float4 TangentToWorld2 )
{
	float3 TangentToWorld1 = cross(TangentToWorld2.xyz,TangentToWorld0) * TangentToWorld2.w;
	return float3x3(TangentToWorld0, TangentToWorld1, TangentToWorld2.xyz);
}
struct FVertexFactoryInput
{
	float4	Position		: ATTRIBUTE0;
	float3	TangentX		: ATTRIBUTE1;
	float4	TangentZ		: ATTRIBUTE2;	
	uint4	BlendIndices	: ATTRIBUTE3;
	uint4	BlendIndicesExtra	: ATTRIBUTE14;
	float4	BlendWeights	: ATTRIBUTE4;	
	float4	BlendWeightsExtra	: ATTRIBUTE15;
	float2	TexCoords0 : ATTRIBUTE5;
	float3	DeltaPosition	: ATTRIBUTE9;	
	float3	DeltaTangentZ	: ATTRIBUTE10;	
	uint VertexID : SV_VertexID;
	float4 Color : ATTRIBUTE13;
	 uint InstanceIdOffset : ATTRIBUTE16 ; 			uint DrawInstanceId : SV_InstanceID;
	 
};
struct FVertexFactoryInterpolantsVSToPS
{
	float4 TangentToWorld0 : TEXCOORD10_centroid; float4	TangentToWorld2	: TEXCOORD11_centroid;
	float4	TexCoords[(3+1)/2]	: TEXCOORD0;
	nointerpolation uint PrimitiveId : PRIMITIVE_ID;
};
float2 GetUV(FVertexFactoryInterpolantsVSToPS Interpolants, int UVIndex)
{
	float4 UVVector = Interpolants.TexCoords[UVIndex / 2];
	return UVIndex % 2 ? UVVector.zw : UVVector.xy;
}
FMaterialPixelParameters GetMaterialPixelParameters(FVertexFactoryInterpolantsVSToPS Interpolants, float4 SvPosition)
{
	FMaterialPixelParameters Result = MakeInitializedMaterialPixelParameters();
	[unroll]
	for(int CoordinateIndex = 0;CoordinateIndex < 3;CoordinateIndex++)
	{
		Result.TexCoords[CoordinateIndex] = GetUV(Interpolants, CoordinateIndex);
	}
	float3 TangentToWorld0 = Interpolants.TangentToWorld0.xyz;
	float4 TangentToWorld2 = Interpolants.TangentToWorld2;
	Result.TangentToWorld = AssembleTangentToWorld( TangentToWorld0, TangentToWorld2 );
	Result.UnMirrored = TangentToWorld2.w;
	Result.VertexColor = 0;
	Result.TwoSidedSign = 1;
	Result.PrimitiveId = Interpolants.PrimitiveId;
	return Result;
}
struct FVertexFactoryIntermediates
{
	float3 InvNonUniformScale;
	float DeterminantSign;
	FDFMatrix LocalToWorld;
	FDFInverseMatrix WorldToLocal;
	FDFMatrix PrevLocalToWorld;
	float3x4 BlendMatrix;
	float3 UnpackedPosition;
	float3x3 TangentToLocal; 
	float4 Color;
	FSceneDataIntermediates SceneData;
};
FPrimitiveSceneData GetPrimitiveData(FVertexFactoryIntermediates Intermediates)
{
	return Intermediates.SceneData.Primitive;
}
float3 UnpackedPosition( FVertexFactoryInput Input )
{
		return float3(Input.Position.xyz);
}
float3 Calculate3DVelocity(float4 PackedVelocityA, float4 PackedVelocityC)
{
	float2 ScreenPos = PackedVelocityA.xy / PackedVelocityA.w - ResolvedView.TemporalAAJitter.xy;
	float2 PrevScreenPos = PackedVelocityC.xy / PackedVelocityC.w - ResolvedView.TemporalAAJitter.zw;
	float DeviceZ = PackedVelocityA.z / PackedVelocityA.w;
	float PrevDeviceZ = PackedVelocityC.z / PackedVelocityC.w;
	float3 Velocity = float3(ScreenPos - PrevScreenPos, DeviceZ - PrevDeviceZ);
	return Velocity;
}
struct FVelocityInterpsVSToPS
{
	float4 PackedVelocityA : TEXCOORD6;
	float4 PackedVelocityC : TEXCOORD7;
	FVertexFactoryInterpolantsVSToPS FactoryInterpolants;
	float3 PixelPositionExcludingWPO : TEXCOORD8;
};
void MainPixelShader(
	in   float4 SvPosition : SV_Position,
	FVelocityInterpsVSToPS Input
	, in bool bIsFrontFace : SV_IsFrontFace
	 
	,out float4 OutColor : SV_Target0
	)
{
	ResolvedView = ResolveView();
	FMaterialPixelParameters MaterialParameters = GetMaterialPixelParameters(Input.FactoryInterpolants, SvPosition);
	FPixelMaterialInputs PixelMaterialInputs;
	float4 ScreenPosition = SvPositionToResolvedScreenPosition(SvPosition);
	float3 TranslatedWorldPosition = SvPositionToResolvedTranslatedWorld(SvPosition);
	CalcMaterialParametersEx(MaterialParameters, PixelMaterialInputs, SvPosition, ScreenPosition, bIsFrontFace, TranslatedWorldPosition, Input.PixelPositionExcludingWPO);
	const bool bThinTranslucentMaterial = 0 > 0;
	const float MaterialOpacity = GetMaterialOpacity(PixelMaterialInputs);
	GetMaterialClippingVelocity(MaterialParameters, PixelMaterialInputs, bThinTranslucentMaterial, MaterialOpacity);
	float3 Velocity = Calculate3DVelocity(Input.PackedVelocityA, Input.PackedVelocityC);
	OutColor = EncodeVelocityToTexture(Velocity, (GetPrimitiveData(MaterialParameters).Flags & 0x2000000) != 0);
}

/* BASE64_ENV

BASE64_ENV */
/* DIRECT COMPILE
-directcompile -format=PCD3D_SM6 -entry="MainPixelShader" -shaderPlatformName=PCD3D_SM6 -supportedHardwareMask=0 -ps -pipeline D:/TeamHomework/TeamHomework/Saved/ShaderDebugInfo/PCD3D_SM6/M_Khaimera_WeaponLoins_e2fc59f2eff60609/Default/VelocityPipeline/TGPUSkinVertexFactoryDefault/FVelocityPS/0/VelocityShader.usf -nocrashreports
DIRECT COMPILE */
